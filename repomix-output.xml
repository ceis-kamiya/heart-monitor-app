This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
memo.md
package.json
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/index.css
src/main.jsx
src/memo.md
vite.config.js
WHS-1/Software Development Kit/include/utwsapi.h
WHS-1/Software Development Kit/RRD1Sample/framework.h
WHS-1/Software Development Kit/RRD1Sample/pch.cpp
WHS-1/Software Development Kit/RRD1Sample/pch.h
WHS-1/Software Development Kit/RRD1Sample/resource.h
WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.cpp
WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.h
WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.vcxproj
WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.vcxproj.filters
WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.vcxproj.user
WHS-1/Software Development Kit/RRD1Sample/RRD1SampleDlg.cpp
WHS-1/Software Development Kit/RRD1Sample/RRD1SampleDlg.h
WHS-1/Software Development Kit/RRD1Sample/targetver.h
WHS-1/Software Development Kit/WHS1Sample/framework.h
WHS-1/Software Development Kit/WHS1Sample/pch.cpp
WHS-1/Software Development Kit/WHS1Sample/pch.h
WHS-1/Software Development Kit/WHS1Sample/resource.h
WHS-1/Software Development Kit/WHS1Sample/targetver.h
WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.cpp
WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.h
WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.vcxproj
WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.vcxproj.filters
WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.vcxproj.user
WHS-1/Software Development Kit/WHS1Sample/WHS1SampleDlg.cpp
WHS-1/Software Development Kit/WHS1Sample/WHS1SampleDlg.h
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/index.css">
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="src/main.jsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="WHS-1/Software Development Kit/include/utwsapi.h">
#pragma once

#include <windows.h>

#ifdef UTWSAPI_EXPORTS
#define UTWS_API __declspec(dllexport)
#else
#define UTWS_API __declspec(dllimport)
#endif

//デバイス識別子
//受信機 RRD-1
#define UTWS_RRD_1    0x00000001
//送信機 WHS-1
#define UTWS_WHS_1    0x00000002
// WHS-1のバイナリデータ
#define UTWS_WHS_1_BINARYDATA 0x00000003

//エラー識別子のインクルード
#include "utwserrdef.h"

//構造体のインクルード
#include "utwsstruct.h"

//////共通////////////////////////////////

//エラー情報を返す
//戻り値
//直前に発生したエラーのエラー識別子を返します．
//解説
//無効な引数ならば，エラー識別子だけを返します．
//また，引数のバッファサイズがエラー文字数よりも小さいときは，バッファサイズに切り詰められます．
UTWS_API UINT WINAPI UTWSGetErrorMessage(
  //関数実行時のハンドル、open系、close系はハンドルが確定しないので0とする。
  /*in*/ HANDLE _handle,
  //エラーに関する説明が格納される文字列バッファへのポインタ
  /*out*/ LPSTR _err_message,
  //指定されたバッファに保持できる最大文字数．終端の NULL 文字を含む
  /*in*/ UINT _max_length
);

//デバイスを開く
//戻り値
//成功するとデバイスへのハンドルが返ります．
//失敗すると 0 が返ります．
//32-bit DLL では32bit値，64-bit DLL では64bit値であることに注意してください．
UTWS_API HANDLE WINAPI UTWSOpenDevice(
  //オープンしたいデバイスの識別子を指定してください．
  /*in*/ UINT _device_id,
  //WHS1-1をオープンするときは，何番目のデバイスをオープンするか指定して下さい．
  //１台しかつながっていないときは 0として下さい．
  //RRD-1では0として下さい．
  /*in*/ UINT _device_no
);

//デバイスをクローズする
//戻り値
//成功すると TRUE が返る．失敗すると FALSE が返る．
UTWS_API BOOL WINAPI UTWSCloseDevice(
  //クローズしようとするハンドル
  /*in*/ HANDLE _handle
);

//すべてのデバイスをクローズする
//戻り値
//なし
UTWS_API VOID WINAPI UTWSCloseAll(VOID);

//// RRD-1 //////////////////////////////////

//RRD-1でデータ受信を開始する
//成功ならば TRUE が返る
//第2引数にはイベントオブジェクトへのポインタを指定します．
//0 が指定された場合，そのオブジェクトは使用されません
//受信すると，イベントはシグナル状態になります．
//シグナル状態は，UTWSRRD1GetData関数ですべてのデータが取り出されない限り
//非シグナルにはなりません．
//第3引数にはコールバック関数へのポインタを指定します．
//コールバック関数の第一引数はユーザが_callBackArgで指定します．
//受信すると，このコールバック関数が呼び出されます．
//第2引数は，ハンドルが返ります．
//コールバック関数のtypedefを以下の通りとします
typedef VOID(CALLBACK* UTWSRRD1CallBakFunc)(VOID*, VOID*);
UTWS_API BOOL WINAPI UTWSRRD1StartReceiving(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //イベントオブジェクトのハンドル．使用しないときは 0
  /*in*/ HANDLE _event,
  //コールバック関数へのポインタ．使用しないときは 0
  /*in*/ UTWSRRD1CallBakFunc _callBack,
  //コールバック関数を呼び出すときの第1引数．
  /*in*/ VOID* _callBackArg
);

//RRD-1でデータの受信を中止する
//成功ならば TRUE が返る.
UTWS_API BOOL CALLBACK UTWSRRD1StopReceiving(
  //デバイスのハンドル
  /*in*/ HANDLE _handle
);

//RRD-1で受信したデータが何個残っているか返す
//戻り値　失敗ならば -1 が返る．
UTWS_API UINT WINAPI UTWSRRD1DataCount(
  //デバイスのハンドル
  /*in*/ HANDLE _handle
);

//RRD-1で受信したデータを一つ取り出す．
//DLL内では，最大1024個のデータをバッファできる．
//この関数を実行すると，取り出されたデータがバッファから取り去られる．
//成功した場合は TRUE を返す．
//データバッファに何もない状態で呼び出されると，FALSE をかえし，
//ライブラリのエラーステータスは UTWS_ERR_EMPTY_DATA に設定されます．
//このときに_dataの指すバッファに返される値は不定です．
//_data が 0の時は，何もしません．
UTWS_API BOOL WINAPI UTWSRRD1GetData(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //データを受けるとバッファ（構造体）へのポインタ
  /*out*/ RRD1Data* _data
);

//RRD-1で受信したデータを一つ取り出す．
//UTWSRRD1GetData のミリ秒単位バージョン
UTWS_API BOOL WINAPI UTWSRRD1GetDataEx(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //データを受けるとバッファ（構造体）へのポインタ
  /*out*/ RRD1DataEx* _data
);

//RRD-1がオープンしているかどうか調べる
//戻り値　オープンしていればTURE，していなければ FALSE を返す．
UTWS_API BOOL WINAPI UTWSRRD1IsOpen(
  //デバイスのハンドル
  /*in*/ HANDLE _handle
);

//RRD-1がオープン中にUSBコネクタから取り外されたときに呼び出される
//コールバック関数を登録する．
//成功の場合は TURE をかえす．
UTWS_API BOOL WINAPI UTWSRRD1SetCallBackDisconnect(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //コールバック関数へのポインタ．使用しないときは 0
  /*in*/ UTWSRRD1CallBakFunc _callBack,
  //コールバック関数を呼び出すときの引数
  /*in*/ VOID* _callBackArg
);

//RRD-1の無線アドレスを取得する．
//成功すれば TRUE を返します．
//引数に文字列をして返されるので,バッファには11文字以上確保して下さい．
UTWS_API BOOL WINAPI UTWSRRD1GetLocalAddress(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //送信先アドレスが返されるバッファへのポインタ
  /*out*/ CHAR* _address
);

//RRD-1の無線アドレスを設定します．
//成功すればTRUEを返します．
//引数は0ターミネーターの文字列です．
UTWS_API BOOL WINAPI UTWSRRD1SetLocalAddress(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //送信先アドレスへのポインタ
  /*in*/ const CHAR* _address
);

//// WHS-1 //////////////////////////////////
//接続されているWHS-1の台数を返します．
//戻り値 : 接続している台数返します．失敗したら -1 を返します．
//_numConnected に接続予定台数を指定して下さい．
//_timeout の間に 20msec間隔で接続台数を調べます．
//接続予定台数に達したらすぐに制御が戻ります．
//_numConnectedが0のときは，_timeoutの間デバイス探します．
//このときは_timeout後に制御が戻ります．
UTWS_API UINT WINAPI UTWSWHS1CountConnected(
  //接続予定台数．未定のときは　0
  /*in*/ UINT _numConnected,
  //タイムアウト，単位msec
  /*in*/ UINT _timeout
);

//WHS-1 の設定値を読み取る
//成功すれば TRUE を返す．
UTWS_API BOOL WINAPI UTWSWHS1ReadConfig(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //設定情報を格納する構造体へのポインタ
  /*out*/ WHS1Config* _readConfig
);

//WHS-1 の設定値を書き込む
//成功すれば TRUE を返す．
UTWS_API BOOL WINAPI UTWSWHS1WriteConfig(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //設定情報を格納する構造体へのポインタ
  /*in*/ const WHS1Config* _readConfig,
  //メモリモードでメモリフルのとき 0: 先頭から上書き，1: フルになった段階で止める
  //メモリモードに設定しないときは無視される
  /*in*/ BYTE _mem_mode,
  //以下現在時刻を設定.メモリモードに設定しないときは無視されるので 0 でかまわない．
  /*in*/ WORD _year,
  /*in*/ WORD _month,
  /*in*/ WORD _day,
  /*in*/ WORD _hour,
  /*in*/ WORD _min,
  /*in*/ WORD _sec
);

//WHS-1の無線送信先アドレスを取得します．
//成功すれば TRUE を返します．
//引数に文字列をして返されるので,バッファには11文字以上確保して下さい．
UTWS_API BOOL WINAPI UTWSWHS1GetDestinationAddress(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //送信先アドレスが返されるバッファへのポインタ
  /*out*/ CHAR* _address
);

//WHS-1の無線送信先アドレスを設定します．
//成功すればTRUEを返します．
//引数は0ターミネーターの文字列です．
UTWS_API BOOL WINAPI UTWSWHS1SetDestinationAddress(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //送信先アドレスへのポインタ
  /*in*/ const CHAR* _address
);

//WHS-1 からメモリの内容をダウンロードしライブラリ内のメモリに保存します．
//戻り値: 読み込んだデータ数を返します．エラーのときの戻り値は-1です．
UTWS_API UINT WINAPI UTWSWHS1ReadMemory(
  //デバイスのハンドル
  /*in*/ HANDLE _handle
);

//WHS-1 からメモリの内容をダウンロードしライブラリ内のメモリに保存します．
//戻り値: エラーのときの戻り値はFALSEです．
UTWS_API BOOL WINAPI UTWSWHS1ReadMemoryEx(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //読み出したデータのヘッダ部
  /*out*/ WHS1MemDataHeader* _header
);

//WHS-1 からメモリの内容をダウンロードしライブラリ内のメモリに保存したデータを
//を取り出す．
//戻り値 : 失敗のときfalse
UTWS_API BOOL WINAPI UTWSWHS1GetReceivedMemory(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //読み出したデータのヘッダ部
  /*out*/ WHS1MemDataHeader* _header,
  //読み出したデータのデータ部，UTWSWHS1ReadMemory関数で得られた
  //データ数だけの配列をあらかじめ用意して下さい．
  //0ならばデータを読み込みません．
  /*out*/ WHS1EcgData* _data,
  //用意した配列WHS1EcgData[]のサイズ
  /*in*/ UINT _size,
  //TRUEのとき1レコード当たりの時計を調整します
  /*in*/ BOOL _time_adjust
);
UTWS_API BOOL WINAPI UTWSWHS1GetReadedMemory(
  HANDLE _handle, WHS1MemDataHeader* _header, WHS1EcgData* _data, UINT _size, BOOL _time_adjust
);

//WHS-1 からメモリの内容をダウンロードしライブラリ内のメモリに保存したデータを
//ファイルに書き出す.
//戻り値 : 失敗のときFALSE
UTWS_API BOOL WINAPI UTWSWHS1SaveReceivedMemory(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //パス名
  /*in*/ LPCSTR _path,
  //TRUEのとき1レコード当たりの時計を調整します
  /*in*/ BOOL _time_adjust
);
UTWS_API BOOL WINAPI UTWSWHS1SaveReadedMemory(
  HANDLE _handle, LPCSTR _path, BOOL _time_adjust
);

//WHS-1 からメモリの内容をダウンロードしライブラリ内のメモリに保存したデータを
//を取り出す．(加速度1秒更新モード時に，＋加速度とー加速度を独立して取得できる）
//戻り値 : 失敗のときfalse
UTWS_API BOOL WINAPI UTWSWHS1GetReceivedMemoryEx(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //読み出したデータのヘッダ部
  /*out*/ WHS1MemDataHeader* _header,
  //読み出したデータのデータ部，UTWSWHS1ReadMemory関数で得られた
  //データ数だけの配列をあらかじめ用意して下さい．
  //0ならばデータを読み込みません．
  /*out*/ WHS1EcgDataEx* _data,
  //用意した配列WHS1EcgData[]のサイズ
  /*in*/ UINT _size,
  //TRUEのとき1レコード当たりの時計を調整します
  /*in*/ BOOL _time_adjust
);

//WHS-1のバージョンを返す．
UTWS_API BOOL WINAPI UTWSWHS1Version(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //バージョン
  /*out*/ UINT* _ver
);

//WHS-1に記録されたデータのブロック数を返す
//戻り値 : 失敗のときfalse
UTWS_API BOOL WINAPI UTWSWHS1GetRecordedSize(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //データが記録されているブロック数
  /*out*/ UINT* _size_to_read
);

//WHS-1のフラッシュメモリの内容を非同期でイナリで取り込む,
//非同期なので、取り込み完了をイベントオブジェクトまたはコールバック関数で調べる
//戻り値:込み込み開始が失敗したらFALSE
UTWS_API BOOL WINAPI UTWSWHS1ReadMemoryBinary(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //取り込み完了時にシグナル状態となるイベントのハンドル。使用しないならば0とする。
  /*in*/ HANDLE _user_event,
  //取り込み完了時に呼び出すコールバック関数。使用しないならば0とする。
  /*in*/ void (*_user_call_back)(void*),
  //コールバック関数の引数。
  void* _user_call_back_arg
);

//バイナリで取り込んだメモリのバイト数
//getMemoryBinary関数実行前に、ここで得られたバイト数のメモリを確保する
//戻り値 : 失敗したらFALSE、失敗時の*_sizeは不定
UTWS_API BOOL WINAPI UTWSWHS1GetMemoryBinarySize(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //バイト数
  /*out*/ UINT* _size
);

//取り込んだバイナリをコピーする
//先頭の1byteは、WHS-1のtempIDが記録されている。
//従って、実際のメモリよりも1バイト多い。
//バイナリは、透過エスケープを置換済み。
//また、256バイトブロックの開始文字0x01、終端文字0x04および、メモリ終端0xffffffffは削除済み。
//戻り値 : _bufsizeが読み込んだサイズよりも小さければ失敗、FALSEを返す。
UTWS_API BOOL WINAPI UTWSWHS1GetMemoryBinary(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //コピー先のバッファアドレス
  /*out*/ BYTE* _buf,
  //バッファのサイズ
  /*in*/ UINT _bufsize
);

//バイナリをファイルへ保存する
//戻り値:失敗でFALSEを返す
UTWS_API BOOL WINAPI UTWSWHS1SaveMemoryBinary(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //保存先ファイル名
  /*in*/ LPCSTR _filename
);

//バイナリリードの結果を返す
//戻り値 : エラー識別子
UTWS_API UINT WINAPI UTWSWHS1ReadMemoryBinaryResult(
  //デバイスのハンドル
  /*in*/ HANDLE _handle
);

//読み込み中のバイト数と読み込まれる予定のバイト数を返す
//単位は1ブロック/256バイト
//戻り値:　読み込み中以外はFALSEを返す。
//         このときの _seze_readと_size_for_readの値を操作しない
UTWS_API BOOL WINAPI UTWSWHS1ReadSize(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //読み込み中のブロック数
  /*out*/ UINT* _size_read,
  //読み込まれる予定ブロック数
  /*out*/ UINT* _size_for_read
);

//WHS-1が切断(USBを抜くなど)されたときに呼び出される
//コールバック関数を登録する
//成功の場合は TURE をかえす．
UTWS_API BOOL WINAPI UTWSWHS1SetCallBackDisconnect(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //コールバック関数へのポインタ．使用しないときは 0
  /*in*/ void (*_callBack)(void*),
  //コールバック関数を呼び出すときの引数
  /*in*/ void* _callBackArg
);

//WHS-1の連続測定日数を取得する
//_days == 0　はOFF
//成功の場合は TRUEを返す．
UTWS_API BOOL WINAPI UTWSWHS1GetContinuousDays(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //連続日数
  /*out*/ BYTE* _days
);

//WHS-1の連続測定に数を設定する
//_days == 0はOFF，_days == [1-5]これ以外はFALSEを返す．
//成功の場合はTRUEを返す．
UTWS_API BOOL WINAPI UTWSWHS1SetContinuousDays(
  //デバイスのハンドル
  /*in*/ HANDLE _handle,
  //連続日数
  /*out*/ BYTE _days
);

///////////////////////////////////////////////////////////////////
//WHS-1フラッシュのバイナリからデータを復元する。
//戻り値: データ数を返す。失敗のとき-1。
//バイナリからデータを生成する。データ数を返す。
UTWS_API UINT WINAPI UTWSWHS1BinaryToData(
  //バイナリオブジェクトのハンドル
  /*in*/  HANDLE _handle,
  //バイナリデータへのポインタ
  /*in*/  BYTE* _binary,
  //バイナリデータのバイト数
  /*in*/  UINT  _size,
  //測定時刻を補完したいときTURE
  /*in*/  BOOL _time_adjust,
  //リザーブ 常時FALSE
  /*in*/  BOOL _dtr_rri
);

//WHS-1フラッシュのバイナリを保存したファイルから、データを復元する。
//戻り値: データ数を返す。失敗のとき-1。
//バイナリからデータを生成する。データ数を返す。
UTWS_API UINT WINAPI UTWSWHS1BinaryFileToData(
  //バイナリオブジェクトのハンドル
  /*in*/  HANDLE _handle,
  //ファイル名
  /*in*/  LPCTSTR _binaryfile_name,
  //測定時刻を補完したいときTURE
  /*in*/  BOOL _time_adjust,
  //リザーブ 常時FALSE
  /*in*/  BOOL _dtr_rri
);

//バイナリオブジェクトで復元されたデータを取り出す。
//戻り値 : 失敗のときFALSE
UTWS_API BOOL WINAPI UTWSWHS1GetDataFromBinary(
  //バイナリオブジェクトのハンドル
  /*in*/  HANDLE _handle,
  //データのヘッダ部へのバッファ
  /*out*/ WHS1MemDataHeader* _header,
  //データを保存する配列へのポインタ
  //UTWSWHS1BinaryToData関数、またはUTWSWHS1BinaryFileToData関数で得られた
  //データ数だけ配列を準備する。
  /*out*/ WHS1EcgDataEx* _data,
  //_dataのsize
  /*in*/  UINT _size
);

//バイナリオブジェクトで復元されたデータをファイルにCSV保存する
//戻り値 : 失敗のときFALSE
UTWS_API BOOL WINAPI UTWSWHS1SaveDataFromBinary(
  //バイナリデータオブジェクトのハンドル
  /*in*/  HANDLE _handle,
  //ファイル名
  /*in*/  LPCSTR _file_name
);
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/framework.h">
#pragma once

#ifndef VC_EXTRALEAN
#define VC_EXTRALEAN            // Windows ヘッダーから使用されていない部分を除外します。
#endif

#include "targetver.h"

#define _ATL_CSTRING_EXPLICIT_CONSTRUCTORS      // 一部の CString コンストラクターは明示的です。

// 一般的で無視しても安全な MFC の警告メッセージの一部の非表示を解除します。
#define _AFX_ALL_WARNINGS

#include <afxwin.h>         // MFC のコアおよび標準コンポーネント
#include <afxext.h>         // MFC の拡張部分





#ifndef _AFX_NO_OLE_SUPPORT
#include <afxdtctl.h>           // MFC の Internet Explorer 4 コモン コントロール サポート
#endif
#ifndef _AFX_NO_AFXCMN_SUPPORT
#include <afxcmn.h>             // MFC の Windows コモン コントロール サポート
#endif // _AFX_NO_AFXCMN_SUPPORT

#include <afxcontrolbars.h>     // MFC におけるリボンとコントロール バーのサポート
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/pch.cpp">
#include "pch.h"
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/pch.h">
#ifndef PCH_H
#define PCH_H

#include <memory>
#include <thread>
#include <vector>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>

#ifdef _WIN64
#pragma comment(lib, "../x64/utws.lib")
#else
#pragma comment(lib, "../x86/utws.lib")
#endif

#include "framework.h"
#include "../include/utwsapi.h"

#endif //PCH_H
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/resource.h">
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ で生成されたインクルード ファイル。
// RRD1Sample.rc で使用
//
#define IDD_RRD1SAMPLE_DIALOG           102
#define IDR_MAINFRAME                   128
#define IDC_BUTTON_OPEN                 1000
#define IDC_STATIC_OPEN_STATUS          1001
#define IDC_BUTTON_CLOSE                1002
#define IDC_STATIC_CLOSE_STATUS         1003
#define IDC_RADIO_TIMER                 1004
#define IDC_RADIO_EVENT                 1005
#define IDC_RADIO_CALLBACK              1006
#define IDC_BUTTON_START                1007
#define IDC_BUTTON_STOP                 1008
#define IDC_STATIC_HEADER               1010
#define IDC_STATIC_ECG_MODE             1011
#define IDC_STATIC_ECG1                 1012
#define IDC_STATIC_ECG2                 1013
#define IDC_STATIC_ECG3                 1014
#define IDC_STATIC_TEMP1                1015
#define IDC_STATIC_TEMP2                1016
#define IDC_STATIC_TEMP3                1017
#define IDC_STATIC_ACCX1                1018
#define IDC_STATIC_ACCX2                1019
#define IDC_STATIC_ACCX3                1020
#define IDC_STATIC_ACCY1                1021
#define IDC_STATIC_ACCY2                1022
#define IDC_STATIC_ACCY3                1023
#define IDC_STATIC_ACCZ1                1024
#define IDC_STATIC_ACCZ2                1025
#define IDC_STATIC_ACCZ3                1026
#define IDC_STATIC_ECG4                 1027
#define IDC_STATIC_SENDID               1028
#define IDC_STATIC_TEMP_ID              1029
#define IDC_EDIT_ADDRESS                1030
#define IDC_BUTTON_GET_ADDRESS          1031
#define IDC_BUTTON_SET_ADDRESS          1032
#define IDC_STATIC_TEMP4                1033
#define IDC_STATIC_ACCX4                1034
#define IDC_STATIC_ACCY4                1035
#define IDC_STATIC_ACCZ4                1036
#define IDC_STATIC_ECG5                 1037
#define IDC_STATIC_TEMP5                1038
#define IDC_STATIC_ACCX5                1039
#define IDC_STATIC_ACCY5                1040
#define IDC_STATIC_ACCZ5                1041

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        129
#define _APS_NEXT_COMMAND_VALUE         32771
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.cpp">
// RRD1Sample.cpp : アプリケーションのクラス動作を定義します。
//

#include "pch.h"
#include "framework.h"
#include "RRD1Sample.h"
#include "RRD1SampleDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// CRRD1SampleApp

BEGIN_MESSAGE_MAP(CRRD1SampleApp, CWinApp)
  ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()

// CRRD1SampleApp の構築

CRRD1SampleApp::CRRD1SampleApp()
{
}

// 唯一の CRRD1SampleApp オブジェクト

CRRD1SampleApp theApp;

// CRRD1SampleApp の初期化

BOOL CRRD1SampleApp::InitInstance()
{
  CWinApp::InitInstance();

  CRRD1SampleDlg dlg;
  m_pMainWnd = &dlg;
  INT_PTR nResponse = dlg.DoModal();
  if (nResponse == IDOK)
  {
  }
  else if (nResponse == IDCANCEL)
  {
  }
  else if (nResponse == -1)
  {
    TRACE(traceAppMsg, 0, "警告: ダイアログの作成に失敗しました。アプリケーションは予期せずに終了します。\n");
    TRACE(traceAppMsg, 0, "警告: ダイアログで MFC コントロールを使用している場合、#define _AFX_NO_MFC_CONTROLS_IN_DIALOGS を指定できません。\n");
  }

#if !defined(_AFXDLL) && !defined(_AFX_NO_MFC_CONTROLS_IN_DIALOGS)
  ControlBarCleanUp();
#endif

  // ダイアログは閉じられました。アプリケーションのメッセージ ポンプを開始しないで
  //  アプリケーションを終了するために FALSE を返してください。
  return FALSE;
}
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.h">
// RRD1Sample.h : PROJECT_NAME アプリケーションのメイン ヘッダー ファイルです
//

#pragma once

#ifndef __AFXWIN_H__
#error "PCH に対してこのファイルをインクルードする前に 'pch.h' をインクルードしてください"
#endif

#include "resource.h"		// メイン シンボル

// CRRD1SampleApp:
// このクラスの実装については、RRD1Sample.cpp を参照してください
//

class CRRD1SampleApp : public CWinApp
{
public:
  CRRD1SampleApp();

  // オーバーライド
public:
  virtual BOOL InitInstance();

  // 実装

  DECLARE_MESSAGE_MAP()
};

extern CRRD1SampleApp theApp;
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.vcxproj">
<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>16.0</VCProjectVersion>
    <ProjectGuid>{D4749C73-D2CB-48B3-8849-DFFE66BEAA20}</ProjectGuid>
    <Keyword>MFCProj</Keyword>
    <RootNamespace>RRD1Sample</RootNamespace>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <LinkIncremental>true</LinkIncremental>
    <OutDir>$(SolutionDir)$(Platform)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>false</LinkIncremental>
    <IntDir>$(Platform)\$(Configuration)\</IntDir>
    <OutDir>$(SolutionDir)x86\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)$(Platform)\</OutDir>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_WINDOWS;_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <LanguageStandard>stdcpp20</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
    </Link>
    <Midl>
      <MkTypLibCompatible>false</MkTypLibCompatible>
      <ValidateAllParameters>true</ValidateAllParameters>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </Midl>
    <ResourceCompile>
      <Culture>0x0411</Culture>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>WIN32;_WINDOWS;_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <LanguageStandard>stdcpp20</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
    </Link>
    <Midl>
      <MkTypLibCompatible>false</MkTypLibCompatible>
      <ValidateAllParameters>true</ValidateAllParameters>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </Midl>
    <ResourceCompile>
      <Culture>0x0411</Culture>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <LanguageStandard>stdcpp20</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
    <Midl>
      <MkTypLibCompatible>false</MkTypLibCompatible>
      <ValidateAllParameters>true</ValidateAllParameters>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </Midl>
    <ResourceCompile>
      <Culture>0x0411</Culture>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_WINDOWS;NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <LanguageStandard>stdcpp20</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
    <Midl>
      <MkTypLibCompatible>false</MkTypLibCompatible>
      <ValidateAllParameters>true</ValidateAllParameters>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </Midl>
    <ResourceCompile>
      <Culture>0x0411</Culture>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include="framework.h" />
    <ClInclude Include="pch.h" />
    <ClInclude Include="Resource.h" />
    <ClInclude Include="RRD1Sample.h" />
    <ClInclude Include="RRD1SampleDlg.h" />
    <ClInclude Include="targetver.h" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="pch.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="RRD1Sample.cpp" />
    <ClCompile Include="RRD1SampleDlg.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="RRD1Sample.rc" />
  </ItemGroup>
  <ItemGroup>
    <None Include="res\RRD1Sample.rc2" />
  </ItemGroup>
  <ItemGroup>
    <Image Include="res\RRD1Sample.ico" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.vcxproj.filters">
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <Filter Include="ソース ファイル">
      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
    </Filter>
    <Filter Include="ヘッダー ファイル">
      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
    </Filter>
    <Filter Include="リソース ファイル">
      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="RRD1Sample.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="RRD1SampleDlg.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="framework.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="targetver.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="Resource.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="pch.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="RRD1Sample.cpp">
      <Filter>ソース ファイル</Filter>
    </ClCompile>
    <ClCompile Include="RRD1SampleDlg.cpp">
      <Filter>ソース ファイル</Filter>
    </ClCompile>
    <ClCompile Include="pch.cpp">
      <Filter>ソース ファイル</Filter>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="RRD1Sample.rc">
      <Filter>リソース ファイル</Filter>
    </ResourceCompile>
  </ItemGroup>
  <ItemGroup>
    <None Include="res\RRD1Sample.rc2">
      <Filter>リソース ファイル</Filter>
    </None>
  </ItemGroup>
  <ItemGroup>
    <Image Include="res\RRD1Sample.ico">
      <Filter>リソース ファイル</Filter>
    </Image>
  </ItemGroup>
</Project>
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/RRD1Sample.vcxproj.user">
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup />
</Project>
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/RRD1SampleDlg.cpp">
// RRD1SampleDlg.cpp : 実装ファイル
//

#include "pch.h"
#include "framework.h"
#include "RRD1Sample.h"
#include "RRD1SampleDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// CRRD1SampleDlg ダイアログ

CRRD1SampleDlg::CRRD1SampleDlg(CWnd* pParent /*=nullptr*/)
  : hRRD_(0),
  event_(nullptr),
  timerID_(0),
  thread_(),
  stop_thread_(nullptr),
  wndECG_(),
  wndTemp_(),
  wndAccX_(),
  wndAccY_(),
  wndAccZ_(),
  data_(),
  radioTimer_(),
  radioEvent_(),
  radioCallBack_(),
  editOpenStatus_(),
  editCloseStatus_(),
  editAddress_(),
  staticHeader_(),
  sendID_(),
  tempID_(),
  staticECG1_(),
  staticECG2_(),
  staticECG3_(),
  staticECG4_(),
  staticECG5_(),
  staticTemp1_(),
  staticTemp2_(),
  staticTemp3_(),
  staticTemp4_(),
  staticTemp5_(),
  staticAccX1_(),
  staticAccX2_(),
  staticAccX3_(),
  staticAccX4_(),
  staticAccX5_(),
  staticAccY1_(),
  staticAccY2_(),
  staticAccY3_(),
  staticAccY4_(),
  staticAccY5_(),
  staticAccZ1_(),
  staticAccZ2_(),
  staticAccZ3_(),
  staticAccZ4_(),
  staticAccZ5_(),
  staticEcgMode_(),
  CDialog(IDD_RRD1SAMPLE_DIALOG, pParent)
{
  m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CRRD1SampleDlg::DoDataExchange(CDataExchange* pDX)
{
  CDialog::DoDataExchange(pDX);
  DDX_Control(pDX, IDC_RADIO_TIMER, radioTimer_);
  DDX_Control(pDX, IDC_RADIO_EVENT, radioEvent_);
  DDX_Control(pDX, IDC_RADIO_CALLBACK, radioCallBack_);
  DDX_Control(pDX, IDC_STATIC_OPEN_STATUS, editOpenStatus_);
  DDX_Control(pDX, IDC_STATIC_CLOSE_STATUS, editCloseStatus_);
  DDX_Control(pDX, IDC_EDIT_ADDRESS, editAddress_);
  DDX_Control(pDX, IDC_STATIC_HEADER, staticHeader_);
  DDX_Control(pDX, IDC_STATIC_SENDID, sendID_);
  DDX_Control(pDX, IDC_STATIC_TEMP_ID, tempID_);
  DDX_Control(pDX, IDC_STATIC_ECG1, staticECG1_);
  DDX_Control(pDX, IDC_STATIC_ECG2, staticECG2_);
  DDX_Control(pDX, IDC_STATIC_ECG3, staticECG3_);
  DDX_Control(pDX, IDC_STATIC_ECG4, staticECG4_);
  DDX_Control(pDX, IDC_STATIC_ECG5, staticECG5_);
  DDX_Control(pDX, IDC_STATIC_TEMP1, staticTemp1_);
  DDX_Control(pDX, IDC_STATIC_TEMP2, staticTemp2_);
  DDX_Control(pDX, IDC_STATIC_TEMP3, staticTemp3_);
  DDX_Control(pDX, IDC_STATIC_TEMP4, staticTemp4_);
  DDX_Control(pDX, IDC_STATIC_TEMP5, staticTemp5_);
  DDX_Control(pDX, IDC_STATIC_ACCX1, staticAccX1_);
  DDX_Control(pDX, IDC_STATIC_ACCX2, staticAccX2_);
  DDX_Control(pDX, IDC_STATIC_ACCX3, staticAccX3_);
  DDX_Control(pDX, IDC_STATIC_ACCX4, staticAccX4_);
  DDX_Control(pDX, IDC_STATIC_ACCX5, staticAccX5_);
  DDX_Control(pDX, IDC_STATIC_ACCY1, staticAccY1_);
  DDX_Control(pDX, IDC_STATIC_ACCY2, staticAccY2_);
  DDX_Control(pDX, IDC_STATIC_ACCY3, staticAccY3_);
  DDX_Control(pDX, IDC_STATIC_ACCY4, staticAccY4_);
  DDX_Control(pDX, IDC_STATIC_ACCY5, staticAccY5_);
  DDX_Control(pDX, IDC_STATIC_ACCZ1, staticAccZ1_);
  DDX_Control(pDX, IDC_STATIC_ACCZ2, staticAccZ2_);
  DDX_Control(pDX, IDC_STATIC_ACCZ3, staticAccZ3_);
  DDX_Control(pDX, IDC_STATIC_ACCZ4, staticAccZ4_);
  DDX_Control(pDX, IDC_STATIC_ACCZ5, staticAccZ5_);
  DDX_Control(pDX, IDC_STATIC_ECG_MODE, staticEcgMode_);
}

BEGIN_MESSAGE_MAP(CRRD1SampleDlg, CDialog)
  ON_WM_PAINT()
  ON_WM_QUERYDRAGICON()
  ON_BN_CLICKED(IDC_BUTTON_OPEN, &CRRD1SampleDlg::OnBnClickedButtonOpen)
  ON_BN_CLICKED(IDC_BUTTON_CLOSE, &CRRD1SampleDlg::OnBnClickedButtonClose)
  ON_WM_CLOSE()
  ON_BN_CLICKED(IDC_BUTTON_GET_ADDRESS, &CRRD1SampleDlg::OnBnClickedButtonGetAddress)
  ON_BN_CLICKED(IDC_BUTTON_SET_ADDRESS, &CRRD1SampleDlg::OnBnClickedButtonSetAddress)
  ON_BN_CLICKED(IDC_BUTTON_START, &CRRD1SampleDlg::OnBnClickedButtonStart)
  ON_BN_CLICKED(IDC_BUTTON_STOP, &CRRD1SampleDlg::OnBnClickedButtonStop)
  ON_WM_TIMER()
END_MESSAGE_MAP()

// CRRD1SampleDlg メッセージ ハンドラー

BOOL CRRD1SampleDlg::OnInitDialog()
{
  CDialog::OnInitDialog();

  // このダイアログのアイコンを設定します。アプリケーションのメイン ウィンドウがダイアログでない場合、
  //  Framework は、この設定を自動的に行います。
  SetIcon(m_hIcon, TRUE);			// 大きいアイコンの設定
  SetIcon(m_hIcon, FALSE);		// 小さいアイコンの設定

  // TODO: 初期化をここに追加します。
  //受信検出はデフォルトでタイマーを使う
  radioTimer_.SetCheck(BST_CHECKED);
  //受信表示staticのvectorへの登録
  wndECG_.push_back(&staticECG1_);
  wndECG_.push_back(&staticECG2_);
  wndECG_.push_back(&staticECG3_);
  wndECG_.push_back(&staticECG4_);
  wndECG_.push_back(&staticECG5_);
  wndTemp_.push_back(&staticTemp1_);
  wndTemp_.push_back(&staticTemp2_);
  wndTemp_.push_back(&staticTemp3_);
  wndTemp_.push_back(&staticTemp4_);
  wndTemp_.push_back(&staticTemp5_);
  wndAccX_.push_back(&staticAccX1_);
  wndAccX_.push_back(&staticAccX2_);
  wndAccX_.push_back(&staticAccX3_);
  wndAccX_.push_back(&staticAccX4_);
  wndAccX_.push_back(&staticAccX5_);
  wndAccY_.push_back(&staticAccY1_);
  wndAccY_.push_back(&staticAccY2_);
  wndAccY_.push_back(&staticAccY3_);
  wndAccY_.push_back(&staticAccY4_);
  wndAccY_.push_back(&staticAccY5_);
  wndAccZ_.push_back(&staticAccZ1_);
  wndAccZ_.push_back(&staticAccZ2_);
  wndAccZ_.push_back(&staticAccZ3_);
  wndAccZ_.push_back(&staticAccZ4_);
  wndAccZ_.push_back(&staticAccZ5_);

  return TRUE;  // フォーカスをコントロールに設定した場合を除き、TRUE を返します。
}

//ヘッダ部の文字列を生成し表示する
void displayHeader(CWnd* _wnd, const RRD1DataEx& _data)
{
  using namespace std;

  stringstream ss;
  ss << setw(2) << setfill('0') << _data.hour << ':'
    << setw(2) << setfill('0') << _data.min << ':'
    << setw(2) << setfill('0') << _data.sec << '.'
    << setw(3) << setfill('0') << _data.msec;

  switch (_data.ecg_mode) {
  case 0:
    ss << " 心拍波形";
    break;
  case 1:
    ss << " 心拍周期";
    break;
  case 2:
    ss << " 心拍数";
    break;
  default:
    ss << " 加速度";
  }
  if (1 == _data.ecg_mode || 2 == _data.ecg_mode) {
    ss << " 加速度センサモード: " << (0 == _data.acc_mode ? "移動平均" : "ピークホールド");
  }
  if (0 != _data.ecg_mode && 0 == _data.sampling_freq)
    ss << " 1拍1回送信";
  if (_data.lowbattery)
    ss << " ローバッテリー";
  if (_data.saturation)
    ss << " 入力信号飽和";
  _wnd->SetWindowText(ss.str().c_str());
}

//BYTE値を数値としてウィンドウに書き込む
void displayByteValue(CWnd* _wnd, BYTE _b)
{
  std::stringstream ss;
  ss << static_cast<int>(_b);

  _wnd->SetWindowText(ss.str().c_str());
}

//WORD値をウィンドウに書き込む
void displayWordValue(CWnd* _wnd, WORD _w)
{
  std::stringstream ss;
  ss << static_cast<int>(_w);

  _wnd->SetWindowText(ss.str().c_str());
}

//字数を下 _p 桁の制度で表示する
void displayFloatValue(CWnd* _wnd, double _v, int _p)
{
  std::stringstream ss;
  ss.setf(std::ios_base::fixed, std::ios_base::floatfield);
  ss << std::setprecision(_p) << _v;

  _wnd->SetWindowText(ss.str().c_str());
}

//受信文字を更新する
void displayReceivedData(CRRD1SampleDlg& _p, const RRD1DataEx& _data)
{
  displayHeader(&_p.staticHeader_, _data);
  displayByteValue(&_p.sendID_, _data.sendedID);
  displayByteValue(&_p.tempID_, _data.tempID);

  switch (_data.ecg_mode)
  {
  case 0:
    _p.staticEcgMode_.SetWindowText("心拍波形");
    for (int i = 0; i != _data.data_count; ++i)
      displayWordValue(_p.wndECG_[i], _data.data[i].ecg);
    break;
  case 1:
    _p.staticEcgMode_.SetWindowText("心拍間隔");
    for (int i = 0; i != _data.data_count; ++i)
      displayWordValue(_p.wndECG_[i], _data.data[i].ecg);
    break;
  case 2:
    _p.staticEcgMode_.SetWindowText("心拍数");
    for (int i = 0; i != _data.data_count; ++i)
      displayFloatValue(_p.wndECG_[i], 60.0 * 1000.0 / double(_data.data[i].ecg), 1);
    break;
  case 3:
    for (auto wnd : _p.wndECG_) {
      wnd->SetWindowText("");
    }
    for (int i = 0; i != _data.data_count; ++i) {
      displayFloatValue(_p.wndECG_[i], std::hypot(_data.data[i].acc_x, _data.data[i].acc_y, _data.data[i].acc_z), 4);
    }
    _p.staticEcgMode_.SetWindowText("|加速度|");
  default:
    break;
  }

  for (int i = 0; i != _data.data_count; ++i) {
    displayFloatValue(_p.wndTemp_[i], _data.data[i].temp, 1);
    displayFloatValue(_p.wndAccX_[i], _data.data[i].acc_x, 4);
    displayFloatValue(_p.wndAccY_[i], _data.data[i].acc_y, 4);
    displayFloatValue(_p.wndAccZ_[i], _data.data[i].acc_z, 4);
  }
}

// ダイアログに最小化ボタンを追加する場合、アイコンを描画するための
//  下のコードが必要です。ドキュメント/ビュー モデルを使う MFC アプリケーションの場合、
//  これは、Framework によって自動的に設定されます。

void CRRD1SampleDlg::OnPaint()
{
  if (IsIconic())
  {
    CPaintDC dc(this); // 描画のデバイス コンテキスト

    SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

    // クライアントの四角形領域内の中央
    int cxIcon = GetSystemMetrics(SM_CXICON);
    int cyIcon = GetSystemMetrics(SM_CYICON);
    CRect rect;
    GetClientRect(&rect);
    int x = (rect.Width() - cxIcon + 1) / 2;
    int y = (rect.Height() - cyIcon + 1) / 2;

    // アイコンの描画
    dc.DrawIcon(x, y, m_hIcon);
  }
  else
  {
    displayReceivedData(*this, data_);
    CDialog::OnPaint();
  }
}

// ユーザーが最小化したウィンドウをドラッグしているときに表示するカーソルを取得するために、
//  システムがこの関数を呼び出します。
HCURSOR CRRD1SampleDlg::OnQueryDragIcon()
{
  return static_cast<HCURSOR>(m_hIcon);
}

//オブジェクトの後始末
void closeHandles(CRRD1SampleDlg& p)
{
  if (p.timerID_) {
    p.KillTimer(p.timerID_);
    p.timerID_ = 0;
  }
  if (p.thread_.joinable()) {
    p.stop_thread_->SetEvent();
    p.thread_.join();
  }
  if (p.event_) {
    p.event_ = nullptr;
  }
  if (p.stop_thread_) {
    p.stop_thread_ = nullptr;
  }
}

//接続が解除されたときのコールバック関数
VOID WINAPI callbackDisconnect(VOID* _p, VOID*)
{
  CRRD1SampleDlg* p = reinterpret_cast<CRRD1SampleDlg*>(_p);

  UTWSCloseDevice(p->hRRD_);
  p->hRRD_ = 0;
  p->MessageBox("ドングルが抜けました．ハンドルは閉じられます．");
  CloseHandle(*p);
}

void CRRD1SampleDlg::OnBnClickedButtonOpen()
{
  hRRD_ = UTWSOpenDevice(UTWS_RRD_1, 0);
  char buffer[256];
  UTWSGetErrorMessage(hRRD_, buffer, 256);
  editOpenStatus_.SetWindowText(buffer);
  if (hRRD_)
    UTWSRRD1SetCallBackDisconnect(hRRD_, callbackDisconnect, this);
}

void CRRD1SampleDlg::OnBnClickedButtonClose()
{
  closeHandles(*this);
  UTWSCloseDevice(hRRD_);
  hRRD_ = 0;
  char buffer[256];
  UTWSGetErrorMessage(0, buffer, 256);
  editCloseStatus_.SetWindowText(buffer);
}

void CRRD1SampleDlg::OnClose()
{
  OnBnClickedButtonClose();
  CDialog::OnClose();
}

void CRRD1SampleDlg::OnBnClickedButtonGetAddress()
{
  CHAR address[11];
  if (UTWSRRD1GetLocalAddress(hRRD_, address)) {
    editAddress_.SetWindowText(address);
  }
  else {
    editAddress_.SetWindowText("失敗しました");
  }
}

void CRRD1SampleDlg::OnBnClickedButtonSetAddress()
{
  using namespace std;

  size_t n = editAddress_.GetWindowTextLength();
  vector<CHAR> buf(n + 1);
  editAddress_.GetWindowText(&buf[0], buf.size());

  if (UTWSRRD1SetLocalAddress(hRRD_, &buf[0])) {
    MessageBox("設定しました．");
  }
  else {
    UINT err_id = UTWSGetErrorMessage(hRRD_, 0, 0);
    if (UTWS_ERR_BAD_DESTINATION_ADDRESS == err_id) {
      MessageBox("宛先アドレスが間違っています．");
    }
    else {
      MessageBox("失敗しました．");
    }
  }
}

int recievingMethod(CRRD1SampleDlg& p)
{
  if (p.radioTimer_.GetCheck())
    return 0;
  if (p.radioEvent_.GetCheck())
    return 1;
  return 2;
}

//受信をイベントで検知するスレッド
void thread_event(CRRD1SampleDlg* p)
{
  while (true) {
    if (WAIT_OBJECT_0 == WaitForSingleObject(*p->stop_thread_, 0)) {
      return;
    }
    if (WAIT_OBJECT_0 == WaitForSingleObject(*p->event_, 1)) {
      p->event_->ResetEvent();
      if (WAIT_OBJECT_0 == WaitForSingleObject(*p->stop_thread_, 0)) {
        return;
      }
      if (UTWSRRD1GetDataEx(p->hRRD_, &p->data_)) {
        p->SendMessage(WM_PAINT);
      }
    }
  }
}

//コールバック関数
VOID CALLBACK callbackRecieved(VOID* _p, VOID* _h)
{
  CRRD1SampleDlg* p = reinterpret_cast<CRRD1SampleDlg*>(_p);

  UINT count = 0;
  while (-1 != (count = UTWSRRD1DataCount(p->hRRD_)) && count) {
    UTWSRRD1GetDataEx(p->hRRD_, &p->data_);
    p->SendMessage(WM_PAINT);
  }
}

void CRRD1SampleDlg::OnBnClickedButtonStart()
{
  using namespace std;

  for_each(wndECG_.begin(), wndECG_.end(), [](auto* p) {p->SetWindowText(""); });
  for_each(wndTemp_.begin(), wndTemp_.end(), [](auto* p) {p->SetWindowText(""); });
  for_each(wndAccX_.begin(), wndAccX_.end(), [](auto* p) {p->SetWindowText(""); });
  for_each(wndAccY_.begin(), wndAccY_.end(), [](auto* p) {p->SetWindowText(""); });
  for_each(wndAccZ_.begin(), wndAccZ_.end(), [](auto* p) {p->SetWindowText(""); });

  if (!hRRD_) {
    MessageBox("RDD-1をオープンしていません");
    return;
  }

  //受信停止させ、ハンドル類をクローズしておく
  UTWSRRD1StopReceiving(hRRD_);
  closeHandles(*this);

  switch (recievingMethod(*this)) {
  case 0:
    SetTimer(timerID_ = 100, 1, 0);
    UTWSRRD1StartReceiving(hRRD_, 0, 0, 0);
    break;

  case 1:
    event_ = make_shared<CEvent>(FALSE, TRUE);
    stop_thread_ = make_shared<CEvent>(FALSE, TRUE);
    UTWSRRD1StartReceiving(hRRD_, *event_, 0, 0);
    thread_ = thread(thread_event, this);
    break;

  case 2:
    UTWSRRD1StartReceiving(hRRD_, 0, callbackRecieved, this);
    break;

  default:
    return;
  }
}

void CRRD1SampleDlg::OnBnClickedButtonStop()
{
  if (!hRRD_)
    return;
  UTWSRRD1StopReceiving(hRRD_);
  closeHandles(*this);
}

void CRRD1SampleDlg::OnTimer(UINT_PTR nIDEvent)
{
  UINT count = 0;
  if (-1 != (count = UTWSRRD1DataCount(hRRD_)) && count)
  {
    UTWSRRD1GetDataEx(hRRD_, &data_);
    SendMessage(WM_PAINT);
  }

  CDialog::OnTimer(nIDEvent);
}
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/RRD1SampleDlg.h">
// RRD1SampleDlg.h : ヘッダー ファイル
//

#pragma once

// CRRD1SampleDlg ダイアログ
class CRRD1SampleDlg : public CDialog
{
  // コンストラクション
public:
  CRRD1SampleDlg(CWnd* pParent = nullptr);	// 標準コンストラクター

// ダイアログ データ
#ifdef AFX_DESIGN_TIME
  enum { IDD = IDD_RRD1SAMPLE_DIALOG };
#endif

protected:
  virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV サポート

// 実装
protected:
  HICON m_hIcon;

  // 生成された、メッセージ割り当て関数
  virtual BOOL OnInitDialog();
  afx_msg void OnPaint();
  afx_msg HCURSOR OnQueryDragIcon();
  DECLARE_MESSAGE_MAP()
public:
  //RDD-1のハンドル
  HANDLE hRRD_;
  //受信イベント
  std::shared_ptr<CEvent> event_;
  //受信タイマー
  UINT_PTR timerID_;
  //イベント受信のための受信スレッド
  std::thread thread_;
  //受信スレッド停止イベント
  std::shared_ptr<CEvent> stop_thread_;
  //受信データ表示のstaticをvectorでまとめる
  std::vector<CStatic*> wndECG_;
  std::vector<CStatic*> wndTemp_;
  std::vector<CStatic*> wndAccX_;
  std::vector<CStatic*> wndAccY_;
  std::vector<CStatic*> wndAccZ_;
  //受信データ
  RRD1DataEx data_;

  CButton radioTimer_;
  CButton radioEvent_;
  CButton radioCallBack_;
  CStatic editOpenStatus_;
  CStatic editCloseStatus_;
  CEdit editAddress_;
  CStatic staticHeader_;
  CStatic sendID_;
  CStatic tempID_;
  CStatic staticECG1_;
  CStatic staticECG2_;
  CStatic staticECG3_;
  CStatic staticECG4_;
  CStatic staticECG5_;
  CStatic staticTemp1_;
  CStatic staticTemp2_;
  CStatic staticTemp3_;
  CStatic staticTemp4_;
  CStatic staticTemp5_;
  CStatic staticAccX1_;
  CStatic staticAccX2_;
  CStatic staticAccX3_;
  CStatic staticAccX4_;
  CStatic staticAccX5_;
  CStatic staticAccY1_;
  CStatic staticAccY2_;
  CStatic staticAccY3_;
  CStatic staticAccY4_;
  CStatic staticAccY5_;
  CStatic staticAccZ1_;
  CStatic staticAccZ2_;
  CStatic staticAccZ3_;
  CStatic staticAccZ4_;
  CStatic staticAccZ5_;
  CStatic staticEcgMode_;
  afx_msg void OnBnClickedButtonOpen();
  afx_msg void OnBnClickedButtonClose();
  afx_msg void OnClose();
  afx_msg void OnBnClickedButtonGetAddress();
  afx_msg void OnBnClickedButtonSetAddress();
  afx_msg void OnBnClickedButtonStart();
  afx_msg void OnBnClickedButtonStop();
  afx_msg void OnTimer(UINT_PTR nIDEvent);
};
</file>

<file path="WHS-1/Software Development Kit/RRD1Sample/targetver.h">
#pragma once

// SDKDDKVer.h をインクルードすると、利用できる最も上位の Windows プラットフォームが定義されます。

// 以前の Windows プラットフォーム用にアプリケーションをビルドする場合は、WinSDKVer.h をインクルードし、
// SDKDDKVer.h をインクルードする前に、サポート対象とするプラットフォームを示すように _WIN32_WINNT マクロを設定します。

#include <SDKDDKVer.h>
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/framework.h">
#pragma once

#ifndef VC_EXTRALEAN
#define VC_EXTRALEAN            // Windows ヘッダーから使用されていない部分を除外します。
#endif

#include "targetver.h"

#define _ATL_CSTRING_EXPLICIT_CONSTRUCTORS      // 一部の CString コンストラクターは明示的です。

// 一般的で無視しても安全な MFC の警告メッセージの一部の非表示を解除します。
#define _AFX_ALL_WARNINGS

#include <afxwin.h>         // MFC のコアおよび標準コンポーネント
#include <afxext.h>         // MFC の拡張部分

#ifndef _AFX_NO_OLE_SUPPORT
#include <afxdtctl.h>           // MFC の Internet Explorer 4 コモン コントロール サポート
#endif
#ifndef _AFX_NO_AFXCMN_SUPPORT
#include <afxcmn.h>             // MFC の Windows コモン コントロール サポート
#endif // _AFX_NO_AFXCMN_SUPPORT

#include <afxcontrolbars.h>     // MFC におけるリボンとコントロール バーのサポート
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/pch.cpp">
#include "pch.h"
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/pch.h">
#ifndef PCH_H
#define PCH_H

#include <mutex>
#include <condition_variable>
#include <chrono>
#include <thread>
#include <sstream>
#include <iomanip>
#include <vector>
#include <algorithm>

#ifdef _WIN64
#pragma comment(lib, "../x64/utws.lib")
#else
#pragma comment(lib, "../x86/utws.lib")
#endif

#include "framework.h"
#include "../include/utwsapi.h"

#endif //PCH_H
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/resource.h">
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ で生成されたインクルード ファイル。
// WHS1Sample.rc で使用
//
#define IDD_WHS1SAMPLE_DIALOG           102
#define IDR_MAINFRAME                   128
#define IDC_EDIT_TEMPID                 1000
#define IDC_RADIO_RF                    1001
#define IDC_RADIO_MEMORY                1002
#define IDC_CHECK_UPDATE_WITH_BEAT      1003
#define IDC_RADIO_WAVE                  1004
#define IDC_RADIO_RRI                   1005
#define IDC_RADIO_HR                    1006
#define IDC_CHECK_MONITOR               1007
#define IDC_RADIO_ACC_PEAK_HOLD         1008
#define IDC_RADIO_ACC_AVERAGE           1009
#define IDC_STATIC_ACC_GROUP            1010
#define IDC_RADIO_OVER_WRITE            1011
#define IDC_STATIC_MEMORY_GROUP         1012
#define IDC_RADIO_MEMORY_STOP           1013
#define IDC_STATIC_TIME                 1014
#define IDC_EDIT_FWVERSION              1015
#define IDC_EDIT_TEMP_OFFSET            1016
#define IDC_STATIC_TEMP_OFFSET          1017
#define IDC_BUTTON_READ                 1018
#define IDC_EDIT_FLUSH_WRITE_COUNT      1019
#define IDC_EDIT_SERIAL_NO              1020
#define IDC_EDIT_CPU_ID                 1021
#define IDC_BUTTON_WRITE                1022
#define IDC_BUTTON_MEMORY               1023
#define IDC_BUTTON_ASYNC_READ           1024
#define IDC_BUTTON_BINTOCSV             1025
#define IDC_STATIC_STATUS               1026
#define IDC_EDIT_BLOCK_SIZE             1027
#define IDC_EDIT_SEND_ADDRESS           1031
#define IDC_BUTTON_SEND_ADDRES          1032

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        130
#define _APS_NEXT_COMMAND_VALUE         32771
#define _APS_NEXT_CONTROL_VALUE         1033
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/targetver.h">
#pragma once

// SDKDDKVer.h をインクルードすると、利用できる最も上位の Windows プラットフォームが定義されます。

// 以前の Windows プラットフォーム用にアプリケーションをビルドする場合は、WinSDKVer.h をインクルードし、
// SDKDDKVer.h をインクルードする前に、サポート対象とするプラットフォームを示すように _WIN32_WINNT マクロを設定します。

#include <SDKDDKVer.h>
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.cpp">
// WHS1Sample.cpp : アプリケーションのクラス動作を定義します。
//

#include "pch.h"
#include "framework.h"
#include "WHS1Sample.h"
#include "WHS1SampleDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// CWHS1SampleApp

BEGIN_MESSAGE_MAP(CWHS1SampleApp, CWinApp)
  ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()

// CWHS1SampleApp の構築

CWHS1SampleApp::CWHS1SampleApp()
{
}

// 唯一の CWHS1SampleApp オブジェクト

CWHS1SampleApp theApp;

// CWHS1SampleApp の初期化

BOOL CWHS1SampleApp::InitInstance()
{
  CWinApp::InitInstance();

  CWHS1SampleDlg dlg;
  m_pMainWnd = &dlg;
  INT_PTR nResponse = dlg.DoModal();
  if (nResponse == IDOK)
  {
  }
  else if (nResponse == IDCANCEL)
  {
  }
  else if (nResponse == -1)
  {
    TRACE(traceAppMsg, 0, "警告: ダイアログの作成に失敗しました。アプリケーションは予期せずに終了します。\n");
    TRACE(traceAppMsg, 0, "警告: ダイアログで MFC コントロールを使用している場合、#define _AFX_NO_MFC_CONTROLS_IN_DIALOGS を指定できません。\n");
  }

#if !defined(_AFXDLL) && !defined(_AFX_NO_MFC_CONTROLS_IN_DIALOGS)
  ControlBarCleanUp();
#endif

  // ダイアログは閉じられました。アプリケーションのメッセージ ポンプを開始しないで
  //  アプリケーションを終了するために FALSE を返してください。
  return FALSE;
}
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.h">
// WHS1Sample.h : PROJECT_NAME アプリケーションのメイン ヘッダー ファイルです
//

#pragma once

#ifndef __AFXWIN_H__
	#error "PCH に対してこのファイルをインクルードする前に 'pch.h' をインクルードしてください"
#endif

#include "resource.h"		// メイン シンボル


// CWHS1SampleApp:
// このクラスの実装については、WHS1Sample.cpp を参照してください
//

class CWHS1SampleApp : public CWinApp
{
public:
	CWHS1SampleApp();

// オーバーライド
public:
	virtual BOOL InitInstance();

// 実装

	DECLARE_MESSAGE_MAP()
};

extern CWHS1SampleApp theApp;
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.vcxproj">
<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>16.0</VCProjectVersion>
    <ProjectGuid>{8C9983E5-D9E7-456C-B0FE-70C13F5F4C90}</ProjectGuid>
    <Keyword>MFCProj</Keyword>
    <RootNamespace>WHS1Sample</RootNamespace>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>MultiByte</CharacterSet>
    <UseOfMfc>Static</UseOfMfc>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
    <OutDir>$(SolutionDir)$(Platform)\</OutDir>
    <IntDir>$(Platform)\$(Configuration)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <LinkIncremental>true</LinkIncremental>
    <OutDir>$(SolutionDir)$(Platform)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)x86\</OutDir>
    <IntDir>$(Platform)\$(Configuration)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)$(Platform)\</OutDir>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>WIN32;_WINDOWS;_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <LanguageStandard>stdcpp20</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
    </Link>
    <Midl>
      <MkTypLibCompatible>false</MkTypLibCompatible>
      <ValidateAllParameters>true</ValidateAllParameters>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </Midl>
    <ResourceCompile>
      <Culture>0x0411</Culture>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_WINDOWS;_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <LanguageStandard>stdcpp20</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
    </Link>
    <Midl>
      <MkTypLibCompatible>false</MkTypLibCompatible>
      <ValidateAllParameters>true</ValidateAllParameters>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </Midl>
    <ResourceCompile>
      <Culture>0x0411</Culture>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <LanguageStandard>stdcpp20</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
    <Midl>
      <MkTypLibCompatible>false</MkTypLibCompatible>
      <ValidateAllParameters>true</ValidateAllParameters>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </Midl>
    <ResourceCompile>
      <Culture>0x0411</Culture>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_WINDOWS;NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <LanguageStandard>stdcpp20</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
    <Midl>
      <MkTypLibCompatible>false</MkTypLibCompatible>
      <ValidateAllParameters>true</ValidateAllParameters>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </Midl>
    <ResourceCompile>
      <Culture>0x0411</Culture>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include="framework.h" />
    <ClInclude Include="pch.h" />
    <ClInclude Include="Resource.h" />
    <ClInclude Include="targetver.h" />
    <ClInclude Include="WHS1Sample.h" />
    <ClInclude Include="WHS1SampleDlg.h" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="pch.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="WHS1Sample.cpp" />
    <ClCompile Include="WHS1SampleDlg.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="WHS1Sample.rc" />
  </ItemGroup>
  <ItemGroup>
    <None Include="res\WHS1Sample.rc2" />
  </ItemGroup>
  <ItemGroup>
    <Image Include="res\WHS1Sample.ico" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.vcxproj.filters">
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <Filter Include="ソース ファイル">
      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
    </Filter>
    <Filter Include="ヘッダー ファイル">
      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
    </Filter>
    <Filter Include="リソース ファイル">
      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="WHS1Sample.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="WHS1SampleDlg.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="framework.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="targetver.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="Resource.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
    <ClInclude Include="pch.h">
      <Filter>ヘッダー ファイル</Filter>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="WHS1Sample.cpp">
      <Filter>ソース ファイル</Filter>
    </ClCompile>
    <ClCompile Include="WHS1SampleDlg.cpp">
      <Filter>ソース ファイル</Filter>
    </ClCompile>
    <ClCompile Include="pch.cpp">
      <Filter>ソース ファイル</Filter>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="WHS1Sample.rc">
      <Filter>リソース ファイル</Filter>
    </ResourceCompile>
  </ItemGroup>
  <ItemGroup>
    <None Include="res\WHS1Sample.rc2">
      <Filter>リソース ファイル</Filter>
    </None>
  </ItemGroup>
  <ItemGroup>
    <Image Include="res\WHS1Sample.ico">
      <Filter>リソース ファイル</Filter>
    </Image>
  </ItemGroup>
</Project>
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/WHS1Sample.vcxproj.user">
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup />
</Project>
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/WHS1SampleDlg.cpp">
// WHS1SampleDlg.cpp : 実装ファイル
//

#include "pch.h"
#include "framework.h"
#include "WHS1Sample.h"
#include "WHS1SampleDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

//時計の更新
CEvent timeUpdate_mutex(TRUE, TRUE);
std::thread timeUpdate_thread;
void timeUpdate(CStatic* _wnd)
{
  using namespace std;

  while (WAIT_OBJECT_0 != WaitForSingleObject(timeUpdate_mutex ,10)) {
    auto tp = chrono::system_clock::now();
    time_t tt = chrono::system_clock::to_time_t(tp);
    tm t;
    localtime_s(&t, &tt);

    stringstream ss;
    ss << t.tm_year + 1900 << '/' << setw(2) << setfill('0') << t.tm_mon + 1 << '/'
      << setw(2) << setfill('0') << t.tm_mday << ' '
      << setw(2) << setfill('0') << t.tm_hour << ':'
      << setw(2) << setfill('0') << t.tm_min << ':'
      << setw(2) << setfill('0') << t.tm_sec;
    _wnd->SetWindowText(ss.str().c_str());
    _wnd->Invalidate(0);
  }
}

//ErrorMessage
void errorMessage(HANDLE _h, const std::string* _comment = 0)
{
  using namespace std;

  char msg[1024];
  UTWSGetErrorMessage(_h, msg, 1024);
  string smsg(msg);
  if (_comment)
    smsg += string(" : ") + *_comment;
  MessageBox(0, smsg.c_str(), "Error", MB_ICONINFORMATION);
}

//WHS-1が引き抜かれたときに呼び出されるコールバック関数
void disconnected(void* _p)
{
  CWHS1SampleDlg* dlg = reinterpret_cast<CWHS1SampleDlg*>(_p);
  dlg->staticStatus_.SetWindowText("WHS-1が抜き取られました");
  UTWSCloseDevice(dlg->hwhs_);
  dlg->hwhs_ = 0;
}

//以下の関数を実行するスレッドオブジェクト
std::thread download_thread;
//非同期フラッシュ読み出し時の、読み出しブロック数表示
void monitor(CWHS1SampleDlg* _p)
{
  using namespace std;

  this_thread::sleep_for(chrono::microseconds(100));
  while (true) {
    UINT n, d;
    if (UTWSWHS1ReadSize(_p->hwhs_, &n, &d)) {
      stringstream s;
      s << n << " / " << d;
      _p->staticStatus_.SetWindowText(s.str().c_str());
    }
    if (WAIT_OBJECT_0 == WaitForSingleObject(_p->download_event_, 20)) {
      break;
    }
  }
}

//ファイルを保存したときtrue
bool saveData(CWHS1SampleDlg& _w)
{
  using namespace std;

  UINT buf_size;
  if (!UTWSWHS1GetMemoryBinarySize(_w.hwhs_, &buf_size)) {
    string msg("読み取ったメモリのサイズを取得できません");
    errorMessage(_w.hwhs_, &msg);
    _w.staticStatus_.SetWindowText(msg.c_str());
    return false;
  }

  vector<BYTE> bd(buf_size);
  if (!UTWSWHS1GetMemoryBinary(_w.hwhs_, &bd[0], bd.size())) {
    string msg("読み取ったメモリをメイン側へコピーできませんでした");
    errorMessage(_w.hwhs_, &msg);
    _w.staticStatus_.SetWindowText(msg.c_str());
    return false;
  }

  //時刻補完を有効にする
  BOOL time_adjust = TRUE;

  //バイナリデータを操作するため、ハンドルを生成する
  HANDLE hbin;
  if (!(hbin = UTWSOpenDevice(UTWS_WHS_1_BINARYDATA, 0))) {
    string msg("バイナリデータを操作するためのハンドルを生成できません。");
    errorMessage(0, &msg);
    _w.staticStatus_.SetWindowText(msg.c_str());
    return false;
  }
  if (-1 == UTWSWHS1BinaryToData(hbin, &bd[0], bd.size(), time_adjust, FALSE)) {
    string msg("バイナリデータを生体情報に変換できません。");
    errorMessage(hbin, &msg);
    _w.staticStatus_.SetWindowText(msg.c_str());
    return false;
  }

  CFileDialog fdg(FALSE);
  INT_PTR res = fdg.DoModal();
  if (IDOK == res) {
    string path = static_cast<const char*>(fdg.GetPathName());
    //生体情報に変換されたバイナリデータをファイルへCSVファイルとして保存する.
    if (!UTWSWHS1SaveDataFromBinary(hbin, path.c_str())) {
      string msg("CSVファイルを保存できませんでした。");
      errorMessage(hbin, &msg);
      _w.staticStatus_.SetWindowText(msg.c_str());
      return false;
    }
    //バイナリファイルとして保存する
    path += ".bin";
    if (!UTWSWHS1SaveMemoryBinary(_w.hwhs_, path.c_str())) {
      string msg("バイナリファイルを保存できませんでした。");
      errorMessage(_w.hwhs_, &msg);
      _w.staticStatus_.SetWindowText(msg.c_str());
      return false;
    }
  }
  
  return true;
}

//非同期読み出し完了時のコールバック
void asynchronousReadCallback(void* _p)
{
  using namespace std;

  CWHS1SampleDlg* p = reinterpret_cast<CWHS1SampleDlg*>(_p);
  if (download_thread.joinable())
    download_thread.join();

  string msg;
  switch (UTWSWHS1ReadMemoryBinaryResult(p->hwhs_)) {
  case UTWS_NO_ERR:
    //データのセーブ
    if (saveData(*p))
      p->staticStatus_.SetWindowText("ファイルを保存しました");
    else
      p->staticStatus_.SetWindowText("ファイルは保存されていません");
    return;
    break;
  case UTWS_ERR_FAILED:
    msg = "失敗しました";
    break;
  case UTWS_ERR_TIMEOUT:
    msg = "タイムアウトです";
    break;
  case UTWS_ERR_INVALID_HANDLE:
    msg = "ハンドルが無効です";
    break;
  default:
    msg = "原因不明のエラーです";
    break;
  }
  errorMessage(p->hwhs_, &msg);
  p->staticStatus_.SetWindowText(msg.c_str());
}

// CWHS1SampleDlg ダイアログ

CWHS1SampleDlg::CWHS1SampleDlg(CWnd* pParent /*=nullptr*/)
  : hwhs_(0)
  , download_event_(TRUE, TRUE)
  , items_(0)
  , editTempID_()
  , radioRF_()
  , radioMemory_()
  , radioWave_()
  , radioRRI_()
  , radioHR_()
  , chkUpdateWithBeat_()
  , chkMonitor_()
  , radioAccPeakHold_()
  , radioACCAverage_()
  , radioOverWrite_()
  , radioMemoryStop_()
  , editFWVersion_()
  , staticTempOffset_()
  , editFlushWriteCount_()
  , editSerialNo_()
  , editCPUID_()
  , editBlockSize_()
  , staticStatus_()
  , groupACC_()
  , groupMemory_()
  , staticTime_()
  , editDestinationAddress_()
  , editTempOffset_()
  , CDialog(IDD_WHS1SAMPLE_DIALOG, pParent)
{
  m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
  //全ダイアログアイテムの登録
  items_.push_back(&editTempID_);
  items_.push_back(&radioRF_);
  items_.push_back(&radioMemory_);
  items_.push_back(&radioWave_);
  items_.push_back(&radioRRI_);
  items_.push_back(&radioHR_);
  items_.push_back(&chkUpdateWithBeat_);
  items_.push_back(&chkMonitor_);
  items_.push_back(&radioAccPeakHold_);
  items_.push_back(&radioACCAverage_);
  items_.push_back(&radioOverWrite_);
  items_.push_back(&radioMemoryStop_);
  items_.push_back(&editFWVersion_);
  items_.push_back(&staticTempOffset_);
  items_.push_back(&editFlushWriteCount_);
  items_.push_back(&editSerialNo_);
  items_.push_back(&editCPUID_);
  items_.push_back(&editBlockSize_);
  items_.push_back(&staticStatus_);
  items_.push_back(&groupACC_);
  items_.push_back(&groupMemory_);
  items_.push_back(&staticTime_);
  items_.push_back(&editDestinationAddress_);
  items_.push_back(&editTempOffset_);
}

void CWHS1SampleDlg::DoDataExchange(CDataExchange* pDX)
{
  CDialog::DoDataExchange(pDX);
  DDX_Control(pDX, IDC_EDIT_TEMPID, editTempID_);
  DDX_Control(pDX, IDC_RADIO_RF, radioRF_);
  DDX_Control(pDX, IDC_RADIO_MEMORY, radioMemory_);
  DDX_Control(pDX, IDC_RADIO_WAVE, radioWave_);
  DDX_Control(pDX, IDC_RADIO_RRI, radioRRI_);
  DDX_Control(pDX, IDC_RADIO_HR, radioHR_);
  DDX_Control(pDX, IDC_CHECK_UPDATE_WITH_BEAT, chkUpdateWithBeat_);
  DDX_Control(pDX, IDC_CHECK_MONITOR, chkMonitor_);
  DDX_Control(pDX, IDC_RADIO_ACC_PEAK_HOLD, radioAccPeakHold_);
  DDX_Control(pDX, IDC_RADIO_ACC_AVERAGE, radioACCAverage_);
  DDX_Control(pDX, IDC_RADIO_OVER_WRITE, radioOverWrite_);
  DDX_Control(pDX, IDC_RADIO_MEMORY_STOP, radioMemoryStop_);
  DDX_Control(pDX, IDC_EDIT_FWVERSION, editFWVersion_);
  DDX_Control(pDX, IDC_STATIC_TEMP_OFFSET, staticTempOffset_);
  DDX_Control(pDX, IDC_EDIT_FLUSH_WRITE_COUNT, editFlushWriteCount_);
  DDX_Control(pDX, IDC_EDIT_SERIAL_NO, editSerialNo_);
  DDX_Control(pDX, IDC_EDIT_CPU_ID, editCPUID_);
  DDX_Control(pDX, IDC_EDIT_BLOCK_SIZE, editBlockSize_);
  DDX_Control(pDX, IDC_STATIC_STATUS, staticStatus_);
  DDX_Control(pDX, IDC_STATIC_ACC_GROUP, groupACC_);
  DDX_Control(pDX, IDC_STATIC_MEMORY_GROUP, groupMemory_);
  DDX_Control(pDX, IDC_STATIC_TIME, staticTime_);
  DDX_Control(pDX, IDC_EDIT_SEND_ADDRESS, editDestinationAddress_);
  DDX_Control(pDX, IDC_EDIT_TEMP_OFFSET, editTempOffset_);
}

BEGIN_MESSAGE_MAP(CWHS1SampleDlg, CDialog)
  ON_WM_PAINT()
  ON_WM_QUERYDRAGICON()
  ON_WM_CLOSE()
  ON_BN_CLICKED(IDC_BUTTON_READ, &CWHS1SampleDlg::OnBnClickedButtonRead)
  ON_BN_CLICKED(IDC_BUTTON_WRITE, &CWHS1SampleDlg::OnBnClickedButtonWrite)
  ON_BN_CLICKED(IDC_BUTTON_MEMORY, &CWHS1SampleDlg::OnBnClickedButtonMemory)
  ON_BN_CLICKED(IDC_BUTTON_ASYNC_READ, &CWHS1SampleDlg::OnBnClickedButtonAsyncRead)
  ON_BN_CLICKED(IDC_BUTTON_BINTOCSV, &CWHS1SampleDlg::OnBnClickedButtonBintocsv)
  ON_BN_CLICKED(IDC_BUTTON_SEND_ADDRES, &CWHS1SampleDlg::OnBnClickedButtonSendAddres)
END_MESSAGE_MAP()

// CWHS1SampleDlg メッセージ ハンドラー

BOOL CWHS1SampleDlg::OnInitDialog()
{
  using namespace std;

  CDialog::OnInitDialog();

  // このダイアログのアイコンを設定します。アプリケーションのメイン ウィンドウがダイアログでない場合、
  //  Framework は、この設定を自動的に行います。
  SetIcon(m_hIcon, TRUE);			// 大きいアイコンの設定
  SetIcon(m_hIcon, FALSE);		// 小さいアイコンの設定

  // 時計の開始
  timeUpdate_thread = thread(timeUpdate, &staticTime_);

  //接続数を調べる タイムアウト1秒
  UINT count = UTWSWHS1CountConnected(1, 1000);
  if (!count) {
    staticStatus_.SetWindowText("WHS-1が接続されていません．");
    return TRUE;
  }
  else if (-1 == count) {
    string msg("接続時のエラー．");
    errorMessage(0, &msg);
    return TRUE;
  }

  //1台目を開く
  hwhs_ = UTWSOpenDevice(UTWS_WHS_1, 0);
  if (!hwhs_) {
    string msg("開けませんでした.");
    errorMessage(0, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return TRUE;
  }
  else {
    //設定情報の表示
    updateConfig();
    //WHS-1抜き取りを検出するコールバック関数登録
    if (!UTWSWHS1SetCallBackDisconnect(hwhs_, disconnected, this)) {
      string msg("コールバック関数を登録できませんでした．");
      errorMessage(hwhs_, &msg);
      return TRUE;
    }
  }

  return TRUE;  // フォーカスをコントロールに設定した場合を除き、TRUE を返します。
}

// ダイアログに最小化ボタンを追加する場合、アイコンを描画するための
//  下のコードが必要です。ドキュメント/ビュー モデルを使う MFC アプリケーションの場合、
//  これは、Framework によって自動的に設定されます。

void CWHS1SampleDlg::OnPaint()
{
  if (IsIconic())
  {
    CPaintDC dc(this); // 描画のデバイス コンテキスト

    SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

    // クライアントの四角形領域内の中央
    int cxIcon = GetSystemMetrics(SM_CXICON);
    int cyIcon = GetSystemMetrics(SM_CYICON);
    CRect rect;
    GetClientRect(&rect);
    int x = (rect.Width() - cxIcon + 1) / 2;
    int y = (rect.Height() - cyIcon + 1) / 2;

    // アイコンの描画
    dc.DrawIcon(x, y, m_hIcon);
  }
  else
  {
    CDialog::OnPaint();
  }
}

// ユーザーが最小化したウィンドウをドラッグしているときに表示するカーソルを取得するために、
//  システムがこの関数を呼び出します。
HCURSOR CWHS1SampleDlg::OnQueryDragIcon()
{
  return static_cast<HCURSOR>(m_hIcon);
}

void CWHS1SampleDlg::OnClose()
{
  //非同期読み込み中ならばこの完了を待ちます
  // (ここでは記述しませんがしていませんが）

  //時計表示の終了
  if (timeUpdate_thread.joinable()) {
    timeUpdate_mutex.SetEvent();
    timeUpdate_thread.join();
  }

  //非同期読み込みモニターが動作していれば完了を待つ
  if (download_thread.joinable())
    download_thread.join();
  //WHS-1をクローズする
  UTWSCloseDevice(hwhs_);

  CDialog::OnClose();
}

//設定情報の更新
void CWHS1SampleDlg::updateConfig()
{
  using namespace std;

  //WHS-1のバージョンチェック
  //バージョンに応じてダイアログアイテムをEnableする．
  UINT ver;
  if (!UTWSWHS1Version(hwhs_, &ver)) {
    string msg("WHS-1の設定情報を取得できませんでした");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }
  editFWVersion_.SetWindowText(to_string(ver).c_str());
  //いったん全てのダイアログアイテムをEnableにする
  for_each(items_.begin(), items_.end(), [](CWnd* p) {p->EnableWindow(); });
  if (ver < 500 /*旧WHS-1*/) {
    chkMonitor_.EnableWindow(FALSE);
  }
  else {//新WHS-1
    radioHR_.EnableWindow(FALSE);
    groupACC_.EnableWindow(FALSE);
    radioACCAverage_.EnableWindow(FALSE);
    radioAccPeakHold_.EnableWindow(FALSE);
    groupMemory_.EnableWindow(FALSE);
    radioOverWrite_.EnableWindow(FALSE);
    radioMemoryStop_.EnableWindow(FALSE);
    staticTempOffset_.EnableWindow(FALSE);
    editTempID_.EnableWindow(FALSE);
  }

  //情報取得
  WHS1Config cnf;
  if (!UTWSWHS1ReadConfig(hwhs_, &cnf)) {
    string msg("WHS-1の設定情報を取得できませんでした");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }

  //情報の表示
  editTempID_.SetWindowText(to_string(cnf.temp_id).c_str());
  //0 : 無線モード 1: メモリモード
  if (cnf.mode == 0) {
    radioRF_.SetCheck(BST_CHECKED);
    radioMemory_.SetCheck(BST_UNCHECKED);
  }
  else {
    radioRF_.SetCheck(BST_UNCHECKED);
    radioMemory_.SetCheck(BST_CHECKED);
  }
  //モニタモード
  chkMonitor_.SetCheck(cnf.monitor_mode == 1 ? BST_CHECKED : BST_UNCHECKED);

  //1 : 心拍波形 2: 心拍間隔 1000Hz 3: 心拍間隔 (加速度1秒更新) 4: 心拍数データ
  radioWave_.SetCheck(BST_UNCHECKED);
  radioRRI_.SetCheck(BST_UNCHECKED);
  radioHR_.SetCheck(BST_UNCHECKED);
  chkUpdateWithBeat_.SetCheck(BST_UNCHECKED);
  switch (cnf.ecg_mode) {
  case 0x01:
    radioWave_.SetCheck(BST_CHECKED);
    break;
  case 0x02:
    radioRRI_.SetCheck(BST_CHECKED);
    break;
  case 0x03:
    radioRRI_.SetCheck(BST_CHECKED);
    chkUpdateWithBeat_.SetCheck(BST_CHECKED);
    break;
  case 0x04:
    radioHR_.SetCheck(BST_CHECKED);
    break;
  default:
    break;
  }

  //加速度モード  0:移動平均 1: ピークホールド
  if (cnf.acc_mode == 0) {
    radioACCAverage_.SetCheck(BST_CHECKED);
    radioAccPeakHold_.SetCheck(BST_UNCHECKED);
  }
  else {
    radioACCAverage_.SetCheck(BST_UNCHECKED);
    radioAccPeakHold_.SetCheck(BST_CHECKED);
  }
  //メモリ書き込み方式 0:上書き 1:停止
  if (cnf.mem_mode == 0) {
    radioOverWrite_.SetCheck(BST_CHECKED);
    radioMemoryStop_.SetCheck(BST_UNCHECKED);
  }
  else {
    radioOverWrite_.SetCheck(BST_UNCHECKED);
    radioMemoryStop_.SetCheck(BST_CHECKED);
  }
  editTempOffset_.SetWindowText(to_string(cnf.tmp_offset).c_str());
  editFlushWriteCount_.SetWindowTextA(to_string(cnf.flush_write_count).c_str());
  editSerialNo_.SetWindowText(to_string(cnf.set_serial_id).c_str());
  editCPUID_.SetWindowText(to_string(cnf.cpu_id).c_str());

  //フラッシュメモリに記録されたブロック数
  UINT block_size;
  if (!UTWSWHS1GetRecordedSize(hwhs_, &block_size)) {
    string msg("フラッシュメモリに記録されたブロック数を取得できませんでした");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }
  editBlockSize_.SetWindowText(to_string(block_size).c_str());

  CHAR address[11];
  if (!UTWSWHS1GetDestinationAddress(hwhs_, address)) {
    string msg("WHS-1の宛先アドレスを取得できませんでした");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }
  editDestinationAddress_.SetWindowText(address);

  staticStatus_.SetWindowText("");
}

void CWHS1SampleDlg::OnBnClickedButtonRead()
{
  updateConfig();
  staticStatus_.SetWindowText("設定を読み出しました");
}

//仮IDが正しいかどうかチェックする
bool examineTempID(CWnd& _wnd, int* _val)
{
  using namespace std;

  auto n = _wnd.GetWindowTextLength();
  vector<char> buf(n + 1);
  _wnd.GetWindowText(&buf[0], buf.size());

  for (auto p = buf.begin(), ep = buf.end(); p != ep - 1; ++p) {
    switch (*p) {
    case '0': case '1': case '2': case '3': case '4': case '5':
    case '6': case '7': case '8': case '9':
      continue;
    default:
      return false;
    }
  }

  *_val = atoi(&buf[0]);
  return  (0 <= *_val && 255 >= *_val);
}

void CWHS1SampleDlg::OnBnClickedButtonWrite()
{
  using namespace std;

  UINT ver;
  if (!UTWSWHS1Version(hwhs_, &ver)) {
    string msg("WHS-1のF/W Verを取得できません");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }

  WHS1Config cnf;
  ZeroMemory(&cnf, sizeof cnf);

  cnf.mode = (BST_CHECKED == radioRF_.GetCheck()) ? 0 : 1;
  if (BST_CHECKED == radioWave_.GetCheck()) {
    cnf.ecg_mode = 1;
  }
  else if (BST_CHECKED == radioRRI_.GetCheck()) {
    cnf.ecg_mode = (BST_CHECKED == chkUpdateWithBeat_.GetCheck()) ? 3 : 2;
  }
  else if (BST_CHECKED == radioHR_.GetCheck()) {
    cnf.ecg_mode = 4;
  }
  else {
    cnf.ecg_mode = 5;
  }
  if (ver >= 500 && BST_CHECKED == chkMonitor_.GetCheck()) {
    cnf.monitor_mode = 1;
  }
  if (ver < 500) {
    cnf.acc_mode = (BST_CHECKED == radioACCAverage_.GetCheck()) ? 0 : 1;
    cnf.mem_mode = (BST_CHECKED == radioOverWrite_.GetCheck()) ? 0 : 1;
  }
  else {
    cnf.acc_mode = 1;
    cnf.mem_mode = 1;
  }

  int tempID;
  if (!examineTempID(editTempID_, &tempID)) {
    string msg("仮IDが間違っています");
    MessageBox(msg.c_str());
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }
  cnf.temp_id = tempID;

  auto tp = chrono::system_clock::now();
  time_t tt = chrono::system_clock::to_time_t(tp);
  tm t;
  localtime_s(&t, &tt);

  if (!UTWSWHS1WriteConfig(hwhs_, &cnf, cnf.mem_mode,
    t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec)) {
    string msg("設定できませんでした");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }

  staticStatus_.SetWindowText("設定を書き込みました");

  return;
}

void CWHS1SampleDlg::OnBnClickedButtonMemory()
{
  using namespace std;

  //フラッシュメモリに記録されたブロック数
  UINT block_size;
  if (!UTWSWHS1GetRecordedSize(hwhs_, &block_size)) {
    string msg("フラッシュメモリに記録されたブロック数を取得できませんでした");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }
  if (block_size == 0) {
    string msg("WHS-1のフラッシュは空です");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }

  //時刻補完を有効にする
  BOOL time_adjust = TRUE;

  WHS1MemDataHeader header;

  if (FALSE == UTWSWHS1ReadMemoryEx(hwhs_, &header)) {
    string msg("WHS-1からデータを読み出せません");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }
  else if (0 == header.data_count) {
    string msg("保存されたデータはありませんでした");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }

  //呼び出し側メモリへデータをコピーする例
  if (3 == header.ecg_mode && 0 == header.acc_mode) {
    //加速度1秒更新かつピークホールド
    vector<WHS1EcgDataEx> data(header.data_count);
    if (!UTWSWHS1GetReceivedMemoryEx(hwhs_, &header, &data[0], data.size(), time_adjust)) {
      string msg("DDL内ストアデータコピーに失敗しました．");
      errorMessage(hwhs_, &msg);
      staticStatus_.SetWindowText(msg.c_str());
      return;
    }
  }
  else {
    vector<WHS1EcgData> data(header.data_count);
    if (!UTWSWHS1GetReceivedMemory(hwhs_, &header, &data[0], data.size(), time_adjust)) {
      string msg("DDL内ストアデータコピーに失敗しました．");
      errorMessage(hwhs_, &msg);
      staticStatus_.SetWindowText(msg.c_str());
      return;
    }
  }

  //ファイルへ保存
  CFileDialog fdg(FALSE);
  if (IDOK == fdg.DoModal()) {
    if (!UTWSWHS1SaveReceivedMemory(hwhs_, static_cast<const char*>(fdg.GetPathName()), time_adjust)) {
      string msg("ファイルの保存に失敗しました．");
      errorMessage(hwhs_, &msg);
      staticStatus_.SetWindowText(msg.c_str());
      return;
    }
    else {
      staticStatus_.SetWindowText("保存しました");
    }
  }
  else {
    staticStatus_.SetWindowText("");
  }
}

void CWHS1SampleDlg::OnBnClickedButtonAsyncRead()
{
  using namespace std;

  download_event_.ResetEvent();
  if (!UTWSWHS1ReadMemoryBinary(hwhs_, download_event_, asynchronousReadCallback, this)) {
    string msg("非同期読み出しを開始できません");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }
  download_thread = thread(monitor, this);
}

void CWHS1SampleDlg::OnBnClickedButtonBintocsv()
{
  using namespace std;

  HANDLE hbin = 0;
  //時刻補完を有効にする
  BOOL time_adjust = TRUE;
  //バイナリデータへのハンドルを生成する
  if (!(hbin = UTWSOpenDevice(UTWS_WHS_1_BINARYDATA, 0))) {
    string msg("バイナリデータのハンドルを生成できませんでした");
    errorMessage(0, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }

  //バイナリファイルの読み込み
  //DLL内でデータに変換する
  CFileDialog fdgr(TRUE);
  if (IDOK == fdgr.DoModal()) {
    string path = static_cast<const char*>(fdgr.GetPathName());
    if (-1 == UTWSWHS1BinaryFileToData(hbin, path.c_str(), time_adjust, FALSE)) {
      string msg("バイナリデータを読み込めませんでした");
      errorMessage(hbin, &msg);
      staticStatus_.SetWindowText(msg.c_str());
      UTWSCloseDevice(hbin);
      return;
    }
  }
  else {
    staticStatus_.SetWindowText("キャンセルされました");
    return;
  }
  //CSVへ書き出す
  CFileDialog fdg(FALSE);
  if (IDOK == fdg.DoModal()) {
    string path = static_cast<const char*>(fdg.GetPathName());
    if (!UTWSWHS1SaveDataFromBinary(hbin, path.c_str())) {
      string msg("CSVファイルを保存できませんでした");
      errorMessage(hbin, &msg);
      staticStatus_.SetWindowText(msg.c_str());
      UTWSCloseDevice(hbin);
      return;
    }
  }
  else {
    staticStatus_.SetWindowText("キャンセルされました");
    return;
  }

  staticStatus_.SetWindowTextA("変換しました");
  UTWSCloseDevice(hbin);
}

void CWHS1SampleDlg::OnBnClickedButtonSendAddres()
{
  using namespace std;

  auto n = editDestinationAddress_.GetWindowTextLength();
  vector<CHAR> buf(n + 1);
  editDestinationAddress_.GetWindowText(&buf[0], buf.size());
  if (!UTWSWHS1SetDestinationAddress(hwhs_, &buf[0])) {
    string msg("宛先アドレスを設定できませんでした");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }

  CHAR address[11];
  if (!UTWSWHS1GetDestinationAddress(hwhs_, address)) {
    string msg("WHS-1の宛先アドレスを取得できませんでした");
    errorMessage(hwhs_, &msg);
    staticStatus_.SetWindowText(msg.c_str());
    return;
  }
  editDestinationAddress_.SetWindowText(address);

  staticStatus_.SetWindowText("宛先アドレスを設定しました");
}
</file>

<file path="WHS-1/Software Development Kit/WHS1Sample/WHS1SampleDlg.h">
// WHS1SampleDlg.h : ヘッダー ファイル
//

#pragma once

// CWHS1SampleDlg ダイアログ
class CWHS1SampleDlg : public CDialog
{
  //全ダイアログアイテムを登録する
  std::vector<CWnd*> items_;

  // コンストラクション
public:
  CWHS1SampleDlg(CWnd* pParent = nullptr);	// 標準コンストラクター

// ダイアログ データ
#ifdef AFX_DESIGN_TIME
  enum { IDD = IDD_WHS1SAMPLE_DIALOG };
#endif

protected:
  virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV サポート

// 実装
protected:
  HICON m_hIcon;

  // 生成された、メッセージ割り当て関数
  virtual BOOL OnInitDialog();
  afx_msg void OnPaint();
  afx_msg HCURSOR OnQueryDragIcon();
  DECLARE_MESSAGE_MAP()
public:
  //WHS-1のハンドル
  HANDLE hwhs_;
  //非同期読み出しが完了したときにシグナル状態となるイベントオブジェクト
  CEvent download_event_;
  //設定情報の更新
  void updateConfig();

  CEdit editTempID_;
  CButton radioRF_;
  CButton radioMemory_;
  CButton radioWave_;
  CButton radioRRI_;
  CButton radioHR_;
  CButton chkUpdateWithBeat_;
  CButton chkMonitor_;
  CButton radioAccPeakHold_;
  CButton radioACCAverage_;
  CButton radioOverWrite_;
  CButton radioMemoryStop_;
  CEdit editFWVersion_;
  CStatic staticTempOffset_;
  CEdit editFlushWriteCount_;
  CEdit editSerialNo_;
  CEdit editCPUID_;
  CEdit editBlockSize_;
  CStatic staticStatus_;
  CStatic groupACC_;
  CStatic groupMemory_;
  CStatic staticTime_;
  CEdit editDestinationAddress_;
  CEdit editTempOffset_;
  afx_msg void OnClose();
  afx_msg void OnBnClickedButtonRead();
  afx_msg void OnBnClickedButtonWrite();
  afx_msg void OnBnClickedButtonMemory();
  afx_msg void OnBnClickedButtonAsyncRead();
  afx_msg void OnBnClickedButtonBintocsv();
  afx_msg void OnBnClickedButtonSendAddres();
};
</file>

<file path="memo.md">
## GitHubへの保存
git add .
git commit -m "コメント"
git push

## リモートのoriginの最新の変更を取得
git fetch origin

## origin/masterの状態に戻す（リモートのorigin/masterに戻したければ先にfetch origin）
git reset --hard origin/master

## 現在のブランチの確認
git branch

## ブランチの移動
git checkout ブランチ名（またはコミットのハッシュ）

## GitHubからのクローン
git clone https://github.com/ユーザー名/リポジトリ名.git

## デプロイ（Vercelで）

## ローカルで起動
npm run dev

## prisma studio起動
npx prisma studio

## コードを1ファイルにまとめる
npx repomix
</file>

<file path="vite.config.js">
// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// 👇 GitHub Pages で使うための「公開先パス」を設定
export default defineConfig({
  base: '/heart-monitor-app/',
  plugins: [react()],
})
</file>

<file path="package.json">
{
  "name": "heart-monitor-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "homepage": "https://ceis-kamiya.github.io/heart-monitor-app",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "deploy": "gh-pages -d dist"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "recharts": "^2.15.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "gh-pages": "^6.3.0",
    "globals": "^15.15.0",
    "vite": "^6.2.0"
  }
}
</file>

<file path="src/memo.md">
## GitHubへの保存
git add .
git commit -m "コメント"
git push

## 最新のコミット状態に復元
git restore src/App.jsx

## GitHubから最新の変更を取得
git pull

## GitHubからのクローン
git clone https://github.com/ユーザー名/リポジトリ名.git

## デプロイ（GitHub Pages）
npm run build
npm run deploy

URL: https://ceis-kamiya.github.io/heart-monitor-app/

## ローカルで起動
npm run dev
</file>

<file path="src/App.jsx">
import React, { useEffect, useState, useRef } from 'react';
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine
} from 'recharts';

const DISPLAY_SECONDS = 60;

function App() {
  const [data, setData] = useState([]);
  const [hrThreshold, setHrThreshold] = useState(80);
  const [accThreshold, setAccThreshold] = useState(1.0);
  const [duration, setDuration] = useState(3); // ここを60や600に変更すれば連続時間が長くなる前提で判定可能
  const [startTime, setStartTime] = useState(0);
  const [liveMode, setLiveMode] = useState(true);
  const [alertRanges, setAlertRanges] = useState([]);
  const [alertActive, setAlertActive] = useState(false);

  const audioRef = useRef(null);
  const hrRef = useRef(90);
  const accRef = useRef(1.0);
  // alert開始のシステム時刻を保持する ref
  const alertStartRef = useRef(null);

  // 毎秒疑似データ生成
  useEffect(() => {
    const interval = setInterval(() => {
      let hr = hrRef.current + (Math.random() * 10 - 5);
      hr = Math.max(60, Math.min(130, hr));
      hrRef.current = hr;

      let acc = accRef.current + (Math.random() * 0.6 - 0.3);
      if (Math.random() < 0.1) acc = 0;
      acc = Math.max(0, Math.min(2.0, acc));
      accRef.current = acc;

      const now = new Date();
      const timeValue = now.getTime() / 1000; // 秒単位のシステム時刻
      const displayTime = now.toLocaleTimeString();

      setData(prev => {
        const newData = [...prev, {
          globalIdx: prev.length,
          timeValue,
          displayTime,
          heartRate: Math.round(hr),
          acceleration: parseFloat(acc.toFixed(2))
        }];
        return newData.slice(-300);
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  // アラート判定：システム時刻に基づいて連続性を測定する
  useEffect(() => {
    if (data.length === 0) return;
    const latest = data[data.length - 1];
    // 最新サンプルの条件判定（参考値として）; 毎回のサンプルが閾値を満たしているか確認
    const conditionMet = latest.heartRate >= hrThreshold && latest.acceleration <= accThreshold;
    const currentTime = Date.now() / 1000; // 現在のシステム時刻（秒）

    if (conditionMet) {
      if (alertActive) {
        // 既にアラートが発動中なら、終了時刻を更新
        setAlertRanges(prev => {
          const updated = [...prev];
          updated[updated.length - 1].end = currentTime;
          return updated;
        });
      } else {
        // アラートはまだ発動していない。alertStartRef に開始時刻が未設定なら設定する
        if (!alertStartRef.current) {
          alertStartRef.current = currentTime;
        }
        // 連続経過時間が duration 以上かチェック
        if (currentTime - alertStartRef.current >= duration) {
          // 連続して条件が満たされているならアラート開始
          setAlertRanges(prev => [...prev, { start: alertStartRef.current, end: currentTime }]);
          if (audioRef.current) audioRef.current.play();
          setAlertActive(true);
        }
      }
    } else {
      // 条件を満たさない場合は、alert開始タイミングをリセットし、アラートが発動中なら終了させる
      alertStartRef.current = null;
      if (alertActive) {
        setAlertActive(false);
      }
    }
  }, [data, hrThreshold, accThreshold, duration, alertActive]);

  // ライブモード：最新 DISPLAY_SECONDS 秒のみ表示
  useEffect(() => {
    if (liveMode && data.length > 0) {
      const currentTime = data[data.length - 1].timeValue;
      setStartTime(currentTime - DISPLAY_SECONDS);
    }
  }, [data, liveMode]);

  const xDomain = [startTime, startTime + DISPLAY_SECONDS];
  const displayData = data.filter(d => d.timeValue >= xDomain[0] && d.timeValue <= xDomain[1]);
  const sliderMin = data.length > 0 ? data[0].timeValue : 0;
  const sliderMax = data.length > 0
    ? Math.max(sliderMin, data[data.length - 1].timeValue - DISPLAY_SECONDS)
    : 0;
  const formatTime = (timeValue) => new Date(timeValue * 1000).toLocaleTimeString();

  // グラフに描画するアラートレンジ（1秒未満は描画しない）  
  const alertLinesHR = alertRanges.map((range, idx) => {
    const { start, end } = range;
    if (end - start < 1) return null;
    const alertData = data.filter(d => d.timeValue >= start && d.timeValue <= end &&
      d.timeValue >= xDomain[0] && d.timeValue <= xDomain[1]);
    return alertData.length > 1 ? (
      <Line
        key={`alert-hr-${idx}`}
        yAxisId="left"
        type="monotone"
        data={alertData}
        dataKey="heartRate"
        stroke="red"
        strokeWidth={4}
        dot={false}
        isAnimationActive={false}
        legendType="none"
        tooltipType="none"
      />
    ) : null;
  }).filter(line => line !== null);

  const alertLinesAcc = alertRanges.map((range, idx) => {
    const { start, end } = range;
    if (end - start < 1) return null;
    const alertData = data.filter(d => d.timeValue >= start && d.timeValue <= end &&
      d.timeValue >= xDomain[0] && d.timeValue <= xDomain[1]);
    return alertData.length > 1 ? (
      <Line
        key={`alert-acc-${idx}`}
        yAxisId="right"
        type="monotone"
        data={alertData}
        dataKey="acceleration"
        stroke="red"
        strokeWidth={4}
        dot={false}
        isAnimationActive={false}
        legendType="none"
        tooltipType="none"
      />
    ) : null;
  }).filter(line => line !== null);

  const latest = data.at(-1);

  return (
    <div style={{ padding: '20px', fontFamily: 'sans-serif' }}>
      <h2>💓 心拍 &amp; 加速度モニタリング</h2>

      <div style={{ marginBottom: '10px' }}>
        <label>
          心拍しきい値：
          <input type="number" value={hrThreshold} onChange={e => setHrThreshold(Number(e.target.value))} />
        </label>
        <label style={{ marginLeft: '20px' }}>
          加速度しきい値：
          <input type="number" value={accThreshold} step="0.1" onChange={e => setAccThreshold(Number(e.target.value))} />
        </label>
        <label style={{ marginLeft: '20px' }}>
          継続秒数：
          <input type="number" value={duration} onChange={e => setDuration(Number(e.target.value))} />
        </label>
      </div>

      <div style={{ marginBottom: '10px' }}>
        <label>
          <input type="checkbox" checked={liveMode} onChange={e => setLiveMode(e.target.checked)} />
          常に最新の {DISPLAY_SECONDS} 秒を表示（ライブモード）
        </label>
      </div>

      {!liveMode && (
        <div style={{ marginBottom: '10px' }}>
          表示開始時刻：
          <input
            type="range"
            min={sliderMin}
            max={sliderMax}
            value={startTime}
            onChange={e => setStartTime(Number(e.target.value))}
            style={{ width: '60%' }}
          />
          <span style={{ marginLeft: '10px' }}>{formatTime(startTime)}</span>
        </div>
      )}

      <ResponsiveContainer width="100%" height={400}>
        <LineChart
          data={displayData}
          margin={{ top: 5, right: 20, bottom: 5, left: 0 }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis
            dataKey="timeValue"
            type="number"
            domain={xDomain}
            tickFormatter={formatTime}
            tick={{ fontSize: 10 }}
          />
          <YAxis yAxisId="left" domain={[30, 220]} />
          <YAxis yAxisId="right" orientation="right" domain={[0, 3]} />
          <ReferenceLine
            yAxisId="left"
            y={hrThreshold}
            stroke="#8884d8"
            strokeDasharray="2 2"
            label={{
              value: `HR ≥ ${hrThreshold}  /  継続 ${duration}s`,
              position: 'insideTopLeft',
              fontSize: 10
            }}
          />
          <ReferenceLine
            yAxisId="right"
            y={accThreshold}
            stroke="#82ca9d"
            strokeDasharray="2 2"
            label={{ value: `Acc ≤ ${accThreshold}`, position: 'insideTopRight', fontSize: 10 }}
          />
          <Tooltip content={() => null} cursor={false} />
          <Legend />
          <Line
            yAxisId="left"
            type="monotone"
            dataKey="heartRate"
            stroke="#8884d8"
            dot={{ r: 0 }}
            activeDot={false}
            isAnimationActive={false}
          />
          <Line
            yAxisId="right"
            type="monotone"
            dataKey="acceleration"
            stroke="#82ca9d"
            dot={{ r: 0 }}
            activeDot={false}
            isAnimationActive={false}
          />
          {alertLinesHR}
          {alertLinesAcc}
        </LineChart>
      </ResponsiveContainer>

      {latest && (
        <div style={{ marginTop: 10, padding: '6px 12px', background: '#f4f4f4', borderRadius: '6px' }}>
          <strong>📍 最新のデータ</strong><br />
          🕒 {latest.displayTime} &nbsp;&nbsp;
          💓 心拍数: {latest.heartRate} bpm &nbsp;&nbsp;
          🌀 加速度: {latest.acceleration} G
        </div>
      )}

      <div style={{ marginTop: '30px' }}>
        <h4>📜 アラート履歴</h4>
        {alertRanges.length === 0 ? (
          <p>アラートはまだ発生していません。</p>
        ) : (
          alertRanges.map((range, i) => (
            <div key={i} style={{
              backgroundColor: '#ffeaea',
              padding: '8px 12px',
              borderRadius: '8px',
              marginBottom: '6px',
              borderLeft: '5px solid red'
            }}>
              <strong>
                🚨 {new Date(range.start * 1000).toLocaleTimeString()} 〜 {new Date(range.end * 1000).toLocaleTimeString()}
              </strong>
              <br />
              心拍 ≥ {hrThreshold} &amp; 加速度 ≤ {accThreshold} が {Math.round(range.end - range.start)} 秒継続
            </div>
          ))
        )}
      </div>

      <audio ref={audioRef} src="https://actions.google.com/sounds/v1/alarms/beep_short.ogg" preload="auto" />
    </div>
  );
}

export default App;
</file>

</files>
